// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: typewriterprison.proto

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	typewriterprison.proto

It has these top-level messages:
	TypewriterPrison
	PocketRoses
*/
package main

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strings "strings"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DivorceFair int32

const (
	DivorceFair_Lawyer    DivorceFair = 4
	DivorceFair_OldMan    DivorceFair = 5
	DivorceFair_Help      DivorceFair = 6
	DivorceFair_Radar     DivorceFair = 9
	DivorceFair_Arm       DivorceFair = 10
	DivorceFair_Verse     DivorceFair = 11
	DivorceFair_Nuts      DivorceFair = 15
	DivorceFair_Briefcase DivorceFair = 21
	DivorceFair_Palace    DivorceFair = 22
)

var DivorceFair_name = map[int32]string{
	4:  "Lawyer",
	5:  "OldMan",
	6:  "Help",
	9:  "Radar",
	10: "Arm",
	11: "Verse",
	15: "Nuts",
	21: "Briefcase",
	22: "Palace",
}
var DivorceFair_value = map[string]int32{
	"Lawyer":    4,
	"OldMan":    5,
	"Help":      6,
	"Radar":     9,
	"Arm":       10,
	"Verse":     11,
	"Nuts":      15,
	"Briefcase": 21,
	"Palace":    22,
}

func (x DivorceFair) Enum() *DivorceFair {
	p := new(DivorceFair)
	*p = x
	return p
}
func (x DivorceFair) String() string {
	return proto.EnumName(DivorceFair_name, int32(x))
}
func (x *DivorceFair) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DivorceFair_value, data, "DivorceFair")
	if err != nil {
		return err
	}
	*x = DivorceFair(value)
	return nil
}
func (DivorceFair) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypewriterprison, []int{0} }

type HopeArch int32

const (
	HopeArch_Mind        HopeArch = 0
	HopeArch_Kennel      HopeArch = 1
	HopeArch_Corn        HopeArch = 2
	HopeArch_Silence     HopeArch = 3
	HopeArch_Lobster     HopeArch = 4
	HopeArch_Oven        HopeArch = 5
	HopeArch_Nose        HopeArch = 6
	HopeArch_Navel       HopeArch = 7
	HopeArch_Pill        HopeArch = 8
	HopeArch_Holly       HopeArch = 9
	HopeArch_Doctrine    HopeArch = 10
	HopeArch_Fork        HopeArch = 11
	HopeArch_Belt        HopeArch = 12
	HopeArch_Cult        HopeArch = 13
	HopeArch_Tusk        HopeArch = 14
	HopeArch_Chips       HopeArch = 15
	HopeArch_Tent        HopeArch = 16
	HopeArch_Coat        HopeArch = 17
	HopeArch_Court       HopeArch = 18
	HopeArch_Runaway     HopeArch = 19
	HopeArch_Mulberry    HopeArch = 20
	HopeArch_Politician  HopeArch = 21
	HopeArch_Message     HopeArch = 22
	HopeArch_Teacher     HopeArch = 23
	HopeArch_Lift        HopeArch = 24
	HopeArch_Danger      HopeArch = 25
	HopeArch_Order       HopeArch = 26
	HopeArch_Title       HopeArch = 27
	HopeArch_Wheelbarrow HopeArch = 28
	HopeArch_Hosepipe    HopeArch = 29
	HopeArch_Carpenter   HopeArch = 30
	HopeArch_Shop        HopeArch = 31
	HopeArch_Nile        HopeArch = 32
	HopeArch_Cloud       HopeArch = 33
	HopeArch_Mill        HopeArch = 34
	HopeArch_Wallet      HopeArch = 35
	HopeArch_Sugar       HopeArch = 36
	HopeArch_Crisis      HopeArch = 37
	HopeArch_Duty        HopeArch = 38
	HopeArch_Milkshake   HopeArch = 39
	HopeArch_Tap         HopeArch = 40
	HopeArch_Clay        HopeArch = 41
	HopeArch_Coronet     HopeArch = 42
	HopeArch_Breakfast   HopeArch = 43
	HopeArch_File        HopeArch = 44
	HopeArch_Bulldozer   HopeArch = 45
	HopeArch_Mattress    HopeArch = 46
	HopeArch_Minute      HopeArch = 47
	HopeArch_Chisel      HopeArch = 48
	HopeArch_Aspirin     HopeArch = 49
	HopeArch_Roulette    HopeArch = 50
	HopeArch_Ham         HopeArch = 51
	HopeArch_Bench       HopeArch = 52
	HopeArch_Miner       HopeArch = 53
)

var HopeArch_name = map[int32]string{
	0:  "Mind",
	1:  "Kennel",
	2:  "Corn",
	3:  "Silence",
	4:  "Lobster",
	5:  "Oven",
	6:  "Nose",
	7:  "Navel",
	8:  "Pill",
	9:  "Holly",
	10: "Doctrine",
	11: "Fork",
	12: "Belt",
	13: "Cult",
	14: "Tusk",
	15: "Chips",
	16: "Tent",
	17: "Coat",
	18: "Court",
	19: "Runaway",
	20: "Mulberry",
	21: "Politician",
	22: "Message",
	23: "Teacher",
	24: "Lift",
	25: "Danger",
	26: "Order",
	27: "Title",
	28: "Wheelbarrow",
	29: "Hosepipe",
	30: "Carpenter",
	31: "Shop",
	32: "Nile",
	33: "Cloud",
	34: "Mill",
	35: "Wallet",
	36: "Sugar",
	37: "Crisis",
	38: "Duty",
	39: "Milkshake",
	40: "Tap",
	41: "Clay",
	42: "Coronet",
	43: "Breakfast",
	44: "File",
	45: "Bulldozer",
	46: "Mattress",
	47: "Minute",
	48: "Chisel",
	49: "Aspirin",
	50: "Roulette",
	51: "Ham",
	52: "Bench",
	53: "Miner",
}
var HopeArch_value = map[string]int32{
	"Mind":        0,
	"Kennel":      1,
	"Corn":        2,
	"Silence":     3,
	"Lobster":     4,
	"Oven":        5,
	"Nose":        6,
	"Navel":       7,
	"Pill":        8,
	"Holly":       9,
	"Doctrine":    10,
	"Fork":        11,
	"Belt":        12,
	"Cult":        13,
	"Tusk":        14,
	"Chips":       15,
	"Tent":        16,
	"Coat":        17,
	"Court":       18,
	"Runaway":     19,
	"Mulberry":    20,
	"Politician":  21,
	"Message":     22,
	"Teacher":     23,
	"Lift":        24,
	"Danger":      25,
	"Order":       26,
	"Title":       27,
	"Wheelbarrow": 28,
	"Hosepipe":    29,
	"Carpenter":   30,
	"Shop":        31,
	"Nile":        32,
	"Cloud":       33,
	"Mill":        34,
	"Wallet":      35,
	"Sugar":       36,
	"Crisis":      37,
	"Duty":        38,
	"Milkshake":   39,
	"Tap":         40,
	"Clay":        41,
	"Coronet":     42,
	"Breakfast":   43,
	"File":        44,
	"Bulldozer":   45,
	"Mattress":    46,
	"Minute":      47,
	"Chisel":      48,
	"Aspirin":     49,
	"Roulette":    50,
	"Ham":         51,
	"Bench":       52,
	"Miner":       53,
}

func (x HopeArch) Enum() *HopeArch {
	p := new(HopeArch)
	*p = x
	return p
}
func (x HopeArch) String() string {
	return proto.EnumName(HopeArch_name, int32(x))
}
func (x *HopeArch) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HopeArch_value, data, "HopeArch")
	if err != nil {
		return err
	}
	*x = HopeArch(value)
	return nil
}
func (HopeArch) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypewriterprison, []int{1} }

type BullySunrise int32

const (
	BullySunrise_Sandals  BullySunrise = 0
	BullySunrise_Showcase BullySunrise = 1
	BullySunrise_Florist  BullySunrise = 2
	BullySunrise_Fridge   BullySunrise = 3
	BullySunrise_Tram     BullySunrise = 4
	BullySunrise_Porch    BullySunrise = 5
	BullySunrise_Skylight BullySunrise = 6
	BullySunrise_Joke     BullySunrise = 7
	BullySunrise_Leather  BullySunrise = 8
	BullySunrise_Crane    BullySunrise = 9
	BullySunrise_Tour     BullySunrise = 10
)

var BullySunrise_name = map[int32]string{
	0:  "Sandals",
	1:  "Showcase",
	2:  "Florist",
	3:  "Fridge",
	4:  "Tram",
	5:  "Porch",
	6:  "Skylight",
	7:  "Joke",
	8:  "Leather",
	9:  "Crane",
	10: "Tour",
}
var BullySunrise_value = map[string]int32{
	"Sandals":  0,
	"Showcase": 1,
	"Florist":  2,
	"Fridge":   3,
	"Tram":     4,
	"Porch":    5,
	"Skylight": 6,
	"Joke":     7,
	"Leather":  8,
	"Crane":    9,
	"Tour":     10,
}

func (x BullySunrise) Enum() *BullySunrise {
	p := new(BullySunrise)
	*p = x
	return p
}
func (x BullySunrise) String() string {
	return proto.EnumName(BullySunrise_name, int32(x))
}
func (x *BullySunrise) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BullySunrise_value, data, "BullySunrise")
	if err != nil {
		return err
	}
	*x = BullySunrise(value)
	return nil
}
func (BullySunrise) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypewriterprison, []int{2} }

type TypewriterPrison struct {
	WineMessenger    []byte       `protobuf:"bytes,1,opt,name=WineMessenger" json:"WineMessenger,omitempty"`
	ShoelaceBeer     []byte       `protobuf:"bytes,2,opt,name=ShoelaceBeer" json:"ShoelaceBeer,omitempty"`
	PocketRoses      *PocketRoses `protobuf:"bytes,3,opt,name=PocketRoses" json:"PocketRoses,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TypewriterPrison) Reset()                    { *m = TypewriterPrison{} }
func (m *TypewriterPrison) String() string            { return proto.CompactTextString(m) }
func (*TypewriterPrison) ProtoMessage()               {}
func (*TypewriterPrison) Descriptor() ([]byte, []int) { return fileDescriptorTypewriterprison, []int{0} }

func (m *TypewriterPrison) GetWineMessenger() []byte {
	if m != nil {
		return m.WineMessenger
	}
	return nil
}

func (m *TypewriterPrison) GetShoelaceBeer() []byte {
	if m != nil {
		return m.ShoelaceBeer
	}
	return nil
}

func (m *TypewriterPrison) GetPocketRoses() *PocketRoses {
	if m != nil {
		return m.PocketRoses
	}
	return nil
}

type PocketRoses struct {
	ScarBusStop      *string       `protobuf:"bytes,1,opt,name=ScarBusStop" json:"ScarBusStop,omitempty"`
	BadgeShopping    *int64        `protobuf:"varint,2,opt,name=BadgeShopping" json:"BadgeShopping,omitempty"`
	DaisySled        *int64        `protobuf:"varint,3,opt,name=DaisySled" json:"DaisySled,omitempty"`
	SubmarineSaw     *int64        `protobuf:"varint,4,opt,name=SubmarineSaw" json:"SubmarineSaw,omitempty"`
	SmileLetter      *bool         `protobuf:"varint,5,opt,name=SmileLetter" json:"SmileLetter,omitempty"`
	IconHope         *BullySunrise `protobuf:"varint,6,opt,name=IconHope,enum=main.BullySunrise" json:"IconHope,omitempty"`
	VanPurse         *HopeArch     `protobuf:"varint,7,opt,name=VanPurse,enum=main.HopeArch" json:"VanPurse,omitempty"`
	MenuPaperclip    []string      `protobuf:"bytes,8,rep,name=MenuPaperclip" json:"MenuPaperclip,omitempty"`
	BeetlePoker      []string      `protobuf:"bytes,9,rep,name=BeetlePoker" json:"BeetlePoker,omitempty"`
	WigPride         []string      `protobuf:"bytes,10,rep,name=WigPride" json:"WigPride,omitempty"`
	DivorceFair      *DivorceFair  `protobuf:"varint,11,opt,name=DivorceFair,enum=main.DivorceFair" json:"DivorceFair,omitempty"`
	FlightParachute  []uint32      `protobuf:"fixed32,12,rep,name=FlightParachute" json:"FlightParachute,omitempty"`
	BeerRace         []uint32      `protobuf:"fixed32,13,rep,name=BeerRace" json:"BeerRace,omitempty"`
	LoftQuarry       [][]byte      `protobuf:"bytes,14,rep,name=LoftQuarry" json:"LoftQuarry,omitempty"`
	TaxiDivorce      [][]byte      `protobuf:"bytes,15,rep,name=TaxiDivorce" json:"TaxiDivorce,omitempty"`
	ElectionButter   []uint32      `protobuf:"fixed32,16,rep,name=ElectionButter" json:"ElectionButter,omitempty"`
	BriefcaseBaboon  [][]byte      `protobuf:"bytes,17,rep,name=BriefcaseBaboon" json:"BriefcaseBaboon,omitempty"`
	MapShark         *string       `protobuf:"bytes,18,opt,name=MapShark" json:"MapShark,omitempty"`
	NetInterlude     *bool         `protobuf:"varint,19,opt,name=NetInterlude" json:"NetInterlude,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *PocketRoses) Reset()                    { *m = PocketRoses{} }
func (m *PocketRoses) String() string            { return proto.CompactTextString(m) }
func (*PocketRoses) ProtoMessage()               {}
func (*PocketRoses) Descriptor() ([]byte, []int) { return fileDescriptorTypewriterprison, []int{1} }

func (m *PocketRoses) GetScarBusStop() string {
	if m != nil && m.ScarBusStop != nil {
		return *m.ScarBusStop
	}
	return ""
}

func (m *PocketRoses) GetBadgeShopping() int64 {
	if m != nil && m.BadgeShopping != nil {
		return *m.BadgeShopping
	}
	return 0
}

func (m *PocketRoses) GetDaisySled() int64 {
	if m != nil && m.DaisySled != nil {
		return *m.DaisySled
	}
	return 0
}

func (m *PocketRoses) GetSubmarineSaw() int64 {
	if m != nil && m.SubmarineSaw != nil {
		return *m.SubmarineSaw
	}
	return 0
}

func (m *PocketRoses) GetSmileLetter() bool {
	if m != nil && m.SmileLetter != nil {
		return *m.SmileLetter
	}
	return false
}

func (m *PocketRoses) GetIconHope() BullySunrise {
	if m != nil && m.IconHope != nil {
		return *m.IconHope
	}
	return BullySunrise_Sandals
}

func (m *PocketRoses) GetVanPurse() HopeArch {
	if m != nil && m.VanPurse != nil {
		return *m.VanPurse
	}
	return HopeArch_Mind
}

func (m *PocketRoses) GetMenuPaperclip() []string {
	if m != nil {
		return m.MenuPaperclip
	}
	return nil
}

func (m *PocketRoses) GetBeetlePoker() []string {
	if m != nil {
		return m.BeetlePoker
	}
	return nil
}

func (m *PocketRoses) GetWigPride() []string {
	if m != nil {
		return m.WigPride
	}
	return nil
}

func (m *PocketRoses) GetDivorceFair() DivorceFair {
	if m != nil && m.DivorceFair != nil {
		return *m.DivorceFair
	}
	return DivorceFair_Lawyer
}

func (m *PocketRoses) GetFlightParachute() []uint32 {
	if m != nil {
		return m.FlightParachute
	}
	return nil
}

func (m *PocketRoses) GetBeerRace() []uint32 {
	if m != nil {
		return m.BeerRace
	}
	return nil
}

func (m *PocketRoses) GetLoftQuarry() [][]byte {
	if m != nil {
		return m.LoftQuarry
	}
	return nil
}

func (m *PocketRoses) GetTaxiDivorce() [][]byte {
	if m != nil {
		return m.TaxiDivorce
	}
	return nil
}

func (m *PocketRoses) GetElectionButter() []uint32 {
	if m != nil {
		return m.ElectionButter
	}
	return nil
}

func (m *PocketRoses) GetBriefcaseBaboon() [][]byte {
	if m != nil {
		return m.BriefcaseBaboon
	}
	return nil
}

func (m *PocketRoses) GetMapShark() string {
	if m != nil && m.MapShark != nil {
		return *m.MapShark
	}
	return ""
}

func (m *PocketRoses) GetNetInterlude() bool {
	if m != nil && m.NetInterlude != nil {
		return *m.NetInterlude
	}
	return false
}

func init() {
	proto.RegisterType((*TypewriterPrison)(nil), "main.TypewriterPrison")
	proto.RegisterType((*PocketRoses)(nil), "main.PocketRoses")
	proto.RegisterEnum("main.DivorceFair", DivorceFair_name, DivorceFair_value)
	proto.RegisterEnum("main.HopeArch", HopeArch_name, HopeArch_value)
	proto.RegisterEnum("main.BullySunrise", BullySunrise_name, BullySunrise_value)
}
func (this *TypewriterPrison) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return TypewriterprisonDescription()
}
func (this *PocketRoses) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return TypewriterprisonDescription()
}
func TypewriterprisonDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 4667 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0x5b, 0x70, 0x23, 0xc7,
		0x75, 0x15, 0x5e, 0x24, 0x70, 0x01, 0x82, 0xcd, 0x21, 0x77, 0x17, 0x4b, 0x49, 0xbb, 0x5c, 0xea,
		0x45, 0xad, 0x2c, 0xae, 0xb2, 0xd2, 0xae, 0x24, 0x6c, 0x6c, 0x05, 0x20, 0xb1, 0x5c, 0xae, 0xf9,
		0x80, 0x06, 0xa4, 0x56, 0xb2, 0x2b, 0x35, 0xd5, 0x1c, 0x34, 0x81, 0x11, 0x07, 0x33, 0xe3, 0x9e,
		0x99, 0xa5, 0xb0, 0x95, 0x0f, 0xa5, 0xe4, 0x24, 0xe5, 0x4a, 0xe5, 0xe1, 0x24, 0x55, 0xb6, 0x15,
		0x59, 0x71, 0x52, 0x95, 0x28, 0x71, 0x9e, 0x8e, 0x13, 0xe7, 0xf1, 0x95, 0x1f, 0x27, 0xf9, 0x72,
		0x95, 0xf3, 0x9d, 0x8f, 0xb8, 0xa2, 0xaa, 0xbc, 0x94, 0x58, 0x89, 0xf5, 0xe1, 0x2a, 0xfd, 0xa4,
		0xfa, 0x35, 0x18, 0x3c, 0xb8, 0xc0, 0xba, 0x4a, 0xf2, 0x17, 0x30, 0xb7, 0xef, 0x39, 0x7d, 0xfb,
		0xf6, 0xed, 0x7b, 0xbb, 0x7b, 0x06, 0xbe, 0xff, 0x3c, 0x2c, 0xb5, 0x5c, 0xb7, 0x65, 0x93, 0x4b,
		0x1e, 0x75, 0x03, 0xf7, 0x20, 0x3c, 0xbc, 0xd4, 0x24, 0xbe, 0x49, 0x2d, 0x2f, 0x70, 0xe9, 0x2a,
		0x97, 0x69, 0xb3, 0x42, 0x63, 0x55, 0x69, 0x2c, 0x6f, 0xc3, 0xdc, 0x75, 0xcb, 0x26, 0xeb, 0x91,
		0x62, 0x83, 0x04, 0xda, 0x73, 0x90, 0x3e, 0xb4, 0x6c, 0x52, 0x4a, 0x2c, 0xa5, 0x56, 0xf2, 0x97,
		0x1f, 0x5e, 0x1d, 0x00, 0xad, 0xf6, 0x23, 0xea, 0x4c, 0xac, 0x73, 0xc4, 0xf2, 0xbb, 0x69, 0x98,
		0x1f, 0xd1, 0xaa, 0x69, 0x90, 0x76, 0x70, 0x87, 0x31, 0x26, 0x56, 0x72, 0x3a, 0xff, 0xaf, 0x95,
		0x60, 0xda, 0xc3, 0xe6, 0x11, 0x6e, 0x91, 0x52, 0x92, 0x8b, 0xd5, 0xa3, 0x76, 0x0e, 0xa0, 0x49,
		0x3c, 0xe2, 0x34, 0x89, 0x63, 0x76, 0x4b, 0xa9, 0xa5, 0xd4, 0x4a, 0x4e, 0x8f, 0x49, 0xb4, 0x27,
		0x60, 0xce, 0x0b, 0x0f, 0x6c, 0xcb, 0x34, 0x62, 0x6a, 0xb0, 0x94, 0x5a, 0xc9, 0xe8, 0x48, 0x34,
		0xac, 0xf7, 0x94, 0x1f, 0x83, 0xd9, 0x63, 0x82, 0x8f, 0xe2, 0xaa, 0x79, 0xae, 0x5a, 0x64, 0xe2,
		0x98, 0xe2, 0x1a, 0x14, 0x3a, 0xc4, 0xf7, 0x71, 0x8b, 0x18, 0x41, 0xd7, 0x23, 0xa5, 0x34, 0x1f,
		0xfd, 0xd2, 0xd0, 0xe8, 0x07, 0x47, 0x9e, 0x97, 0xa8, 0xbd, 0xae, 0x47, 0xb4, 0x0a, 0xe4, 0x88,
		0x13, 0x76, 0x04, 0x43, 0xe6, 0x04, 0xff, 0xd5, 0x9c, 0xb0, 0x33, 0xc8, 0x92, 0x65, 0x30, 0x49,
		0x31, 0xed, 0x13, 0x7a, 0xdb, 0x32, 0x49, 0x69, 0x8a, 0x13, 0x3c, 0x36, 0x44, 0xd0, 0x10, 0xed,
		0x83, 0x1c, 0x0a, 0xa7, 0xad, 0x41, 0x8e, 0xbc, 0x16, 0x10, 0xc7, 0xb7, 0x5c, 0xa7, 0x34, 0xcd,
		0x49, 0x1e, 0x19, 0x31, 0x8b, 0xc4, 0x6e, 0x0e, 0x52, 0xf4, 0x70, 0xda, 0x55, 0x98, 0x76, 0xbd,
		0xc0, 0x72, 0x1d, 0xbf, 0x94, 0x5d, 0x4a, 0xac, 0xe4, 0x2f, 0x3f, 0x30, 0x32, 0x10, 0x76, 0x85,
		0x8e, 0xae, 0x94, 0xb5, 0x4d, 0x40, 0xbe, 0x1b, 0x52, 0x93, 0x18, 0xa6, 0xdb, 0x24, 0x86, 0xe5,
		0x1c, 0xba, 0xa5, 0x1c, 0x27, 0x38, 0x3f, 0x3c, 0x10, 0xae, 0xb8, 0xe6, 0x36, 0xc9, 0xa6, 0x73,
		0xe8, 0xea, 0x45, 0xbf, 0xef, 0x59, 0x3b, 0x0d, 0x53, 0x7e, 0xd7, 0x09, 0xf0, 0x6b, 0xa5, 0x02,
		0x8f, 0x10, 0xf9, 0xb4, 0xfc, 0x37, 0x53, 0x30, 0x3b, 0x49, 0x88, 0x5d, 0x83, 0xcc, 0x21, 0x1b,
		0x65, 0x29, 0x79, 0x2f, 0x3e, 0x10, 0x98, 0x7e, 0x27, 0x4e, 0xfd, 0x88, 0x4e, 0xac, 0x40, 0xde,
		0x21, 0x7e, 0x40, 0x9a, 0x22, 0x22, 0x52, 0x13, 0xc6, 0x14, 0x08, 0xd0, 0x70, 0x48, 0xa5, 0x7f,
		0xa4, 0x90, 0x7a, 0x19, 0x66, 0x23, 0x93, 0x0c, 0x8a, 0x9d, 0x96, 0x8a, 0xcd, 0x4b, 0xe3, 0x2c,
		0x59, 0xad, 0x29, 0x9c, 0xce, 0x60, 0x7a, 0x91, 0xf4, 0x3d, 0x6b, 0xeb, 0x00, 0xae, 0x43, 0xdc,
		0x43, 0xa3, 0x49, 0x4c, 0xbb, 0x94, 0x3d, 0xc1, 0x4b, 0xbb, 0x4c, 0x65, 0xc8, 0x4b, 0xae, 0x90,
		0x9a, 0xb6, 0xf6, 0x7c, 0x2f, 0xd4, 0xa6, 0x4f, 0x88, 0x94, 0x6d, 0xb1, 0xc8, 0x86, 0xa2, 0x6d,
		0x1f, 0x8a, 0x94, 0xb0, 0xb8, 0x27, 0x4d, 0x39, 0xb2, 0x1c, 0x37, 0x62, 0x75, 0xec, 0xc8, 0x74,
		0x09, 0x13, 0x03, 0x9b, 0xa1, 0xf1, 0x47, 0xed, 0x21, 0x88, 0x04, 0x06, 0x0f, 0x2b, 0xe0, 0x59,
		0xa8, 0xa0, 0x84, 0x3b, 0xb8, 0x43, 0x16, 0xef, 0x40, 0xb1, 0xdf, 0x3d, 0xda, 0x02, 0x64, 0xfc,
		0x00, 0xd3, 0x80, 0x47, 0x61, 0x46, 0x17, 0x0f, 0x1a, 0x82, 0x14, 0x71, 0x9a, 0x3c, 0xcb, 0x65,
		0x74, 0xf6, 0x57, 0xfb, 0xa9, 0xde, 0x80, 0x53, 0x7c, 0xc0, 0x8f, 0x0e, 0xcf, 0x68, 0x1f, 0xf3,
		0xe0, 0xb8, 0x17, 0x9f, 0x85, 0x99, 0xbe, 0x01, 0x4c, 0xda, 0xf5, 0xf2, 0xcf, 0xc0, 0xa9, 0x91,
		0xd4, 0xda, 0xcb, 0xb0, 0x10, 0x3a, 0x96, 0x13, 0x10, 0xea, 0x51, 0xc2, 0x22, 0x56, 0x74, 0x55,
		0xfa, 0xb7, 0xe9, 0x13, 0x62, 0x6e, 0x3f, 0xae, 0x2d, 0x58, 0xf4, 0xf9, 0x70, 0x58, 0x78, 0x31,
		0x97, 0xfd, 0xf7, 0x69, 0xf4, 0xfa, 0xeb, 0xaf, 0xbf, 0x9e, 0x5c, 0xfe, 0xf2, 0x14, 0x2c, 0x8c,
		0x5a, 0x33, 0x23, 0x97, 0xef, 0x69, 0x98, 0x72, 0xc2, 0xce, 0x01, 0xa1, 0xdc, 0x49, 0x19, 0x5d,
		0x3e, 0x69, 0x15, 0xc8, 0xd8, 0xf8, 0x80, 0xd8, 0xa5, 0xf4, 0x52, 0x62, 0xa5, 0x78, 0xf9, 0x89,
		0x89, 0x56, 0xe5, 0xea, 0x16, 0x83, 0xe8, 0x02, 0xa9, 0x7d, 0x0a, 0xd2, 0x32, 0x45, 0x33, 0x86,
		0x8b, 0x93, 0x31, 0xb0, 0xb5, 0xa4, 0x73, 0x9c, 0x76, 0x3f, 0xe4, 0xd8, 0xaf, 0x88, 0x8d, 0x29,
		0x6e, 0x73, 0x96, 0x09, 0x58, 0x5c, 0x68, 0x8b, 0x90, 0xe5, 0xcb, 0xa4, 0x49, 0x54, 0x69, 0x8b,
		0x9e, 0x59, 0x60, 0x35, 0xc9, 0x21, 0x0e, 0xed, 0xc0, 0xb8, 0x8d, 0xed, 0x90, 0xf0, 0x80, 0xcf,
		0xe9, 0x05, 0x29, 0x7c, 0x89, 0xc9, 0xb4, 0xf3, 0x90, 0x17, 0xab, 0xca, 0x72, 0x9a, 0xe4, 0x35,
		0x9e, 0x3d, 0x33, 0xba, 0x58, 0x68, 0x9b, 0x4c, 0xc2, 0xba, 0x7f, 0xd5, 0x77, 0x1d, 0x15, 0x9a,
		0xbc, 0x0b, 0x26, 0xe0, 0xdd, 0x3f, 0x3b, 0x98, 0xb8, 0x1f, 0x1c, 0x3d, 0xbc, 0xc1, 0x98, 0x5a,
		0xfe, 0x56, 0x12, 0xd2, 0x3c, 0x5f, 0xcc, 0x42, 0x7e, 0xef, 0x95, 0x7a, 0xcd, 0x58, 0xdf, 0xdd,
		0xaf, 0x6e, 0xd5, 0x50, 0x42, 0x2b, 0x02, 0x70, 0xc1, 0xf5, 0xad, 0xdd, 0xca, 0x1e, 0x4a, 0x46,
		0xcf, 0x9b, 0x3b, 0x7b, 0x57, 0x9f, 0x41, 0xa9, 0x08, 0xb0, 0x2f, 0x04, 0xe9, 0xb8, 0xc2, 0xd3,
		0x97, 0x51, 0x46, 0x43, 0x50, 0x10, 0x04, 0x9b, 0x2f, 0xd7, 0xd6, 0xaf, 0x3e, 0x83, 0xa6, 0xfa,
		0x25, 0x4f, 0x5f, 0x46, 0xd3, 0xda, 0x0c, 0xe4, 0xb8, 0xa4, 0xba, 0xbb, 0xbb, 0x85, 0xb2, 0x11,
		0x67, 0x63, 0x4f, 0xdf, 0xdc, 0xd9, 0x40, 0xb9, 0x88, 0x73, 0x43, 0xdf, 0xdd, 0xaf, 0x23, 0x88,
		0x18, 0xb6, 0x6b, 0x8d, 0x46, 0x65, 0xa3, 0x86, 0xf2, 0x91, 0x46, 0xf5, 0x95, 0xbd, 0x5a, 0x03,
		0x15, 0xfa, 0xcc, 0x7a, 0xfa, 0x32, 0x9a, 0x89, 0xba, 0xa8, 0xed, 0xec, 0x6f, 0xa3, 0xa2, 0x36,
		0x07, 0x33, 0xa2, 0x0b, 0x65, 0xc4, 0xec, 0x80, 0xe8, 0xea, 0x33, 0x08, 0xf5, 0x0c, 0x11, 0x2c,
		0x73, 0x7d, 0x82, 0xab, 0xcf, 0x20, 0x6d, 0x79, 0x0d, 0x32, 0x3c, 0xba, 0x34, 0x0d, 0x8a, 0x5b,
		0x95, 0x6a, 0x6d, 0xcb, 0xd8, 0xad, 0xef, 0x6d, 0xee, 0xee, 0x54, 0xb6, 0x50, 0xa2, 0x27, 0xd3,
		0x6b, 0x2f, 0xee, 0x6f, 0xea, 0xb5, 0x75, 0x94, 0x8c, 0xcb, 0xea, 0xb5, 0xca, 0x5e, 0x6d, 0x1d,
		0xa5, 0x96, 0x4d, 0x58, 0x18, 0x95, 0x27, 0x47, 0xae, 0x8c, 0xd8, 0x14, 0x27, 0x4f, 0x98, 0x62,
		0xce, 0x35, 0x34, 0xc5, 0xff, 0x9a, 0x84, 0xf9, 0x11, 0xb5, 0x62, 0x64, 0x27, 0x2f, 0x40, 0x46,
		0x84, 0xa8, 0xa8, 0x9e, 0x8f, 0x8f, 0x2c, 0x3a, 0x3c, 0x60, 0x87, 0x2a, 0x28, 0xc7, 0xc5, 0x77,
		0x10, 0xa9, 0x13, 0x76, 0x10, 0x8c, 0x62, 0x28, 0xa7, 0xff, 0xf4, 0x50, 0x4e, 0x17, 0x65, 0xef,
		0xea, 0x24, 0x65, 0x8f, 0xcb, 0xee, 0x2d, 0xb7, 0x67, 0x46, 0xe4, 0xf6, 0x6b, 0x30, 0x37, 0x44,
		0x34, 0x71, 0x8e, 0x7d, 0x23, 0x01, 0xa5, 0x93, 0x9c, 0x33, 0x26, 0xd3, 0x25, 0xfb, 0x32, 0xdd,
		0xb5, 0x41, 0x0f, 0x5e, 0x38, 0x79, 0x12, 0x86, 0xe6, 0xfa, 0x9d, 0x04, 0x9c, 0x1e, 0xbd, 0x53,
		0x1c, 0x69, 0xc3, 0xa7, 0x60, 0xaa, 0x43, 0x82, 0xb6, 0xab, 0x76, 0x4b, 0x8f, 0x8e, 0xa8, 0xc1,
		0xac, 0x79, 0x70, 0xb2, 0x25, 0x2a, 0x5e, 0xc4, 0x53, 0x27, 0x6d, 0xf7, 0x84, 0x35, 0x43, 0x96,
		0x7e, 0x21, 0x09, 0xa7, 0x46, 0x92, 0x8f, 0x34, 0xf4, 0x41, 0x00, 0xcb, 0xf1, 0xc2, 0x40, 0xec,
		0x88, 0x44, 0x82, 0xcd, 0x71, 0x09, 0x4f, 0x5e, 0x2c, 0x79, 0x86, 0x41, 0xd4, 0x9e, 0xe2, 0xed,
		0x20, 0x44, 0x5c, 0xe1, 0xb9, 0x9e, 0xa1, 0x69, 0x6e, 0xe8, 0xb9, 0x13, 0x46, 0x3a, 0x14, 0x98,
		0x4f, 0x01, 0x32, 0x6d, 0x8b, 0x38, 0x81, 0xe1, 0x07, 0x94, 0xe0, 0x8e, 0xe5, 0xb4, 0x78, 0x05,
		0xc9, 0x96, 0x33, 0x87, 0xd8, 0xf6, 0x89, 0x3e, 0x2b, 0x9a, 0x1b, 0xaa, 0x95, 0x21, 0x78, 0x00,
		0xd1, 0x18, 0x62, 0xaa, 0x0f, 0x21, 0x9a, 0x23, 0xc4, 0xf2, 0x37, 0xb3, 0x90, 0x8f, 0xed, 0xab,
		0xb5, 0x0b, 0x50, 0x78, 0x15, 0xdf, 0xc6, 0x86, 0x3a, 0x2b, 0x09, 0x4f, 0xe4, 0x99, 0xac, 0x2e,
		0xcf, 0x4b, 0x4f, 0xc1, 0x02, 0x57, 0x71, 0xc3, 0x80, 0x50, 0xc3, 0xb4, 0xb1, 0xef, 0x73, 0xa7,
		0x65, 0xb9, 0xaa, 0xc6, 0xda, 0x76, 0x59, 0xd3, 0x9a, 0x6a, 0xd1, 0xae, 0xc0, 0x3c, 0x47, 0x74,
		0x42, 0x3b, 0xb0, 0x3c, 0x9b, 0x18, 0xec, 0xf4, 0xe6, 0xf3, 0x4a, 0x12, 0x59, 0x36, 0xc7, 0x34,
		0xb6, 0xa5, 0x02, 0xb3, 0xc8, 0xd7, 0xd6, 0xe1, 0x41, 0x0e, 0x6b, 0x11, 0x87, 0x50, 0x1c, 0x10,
		0x83, 0x7c, 0x2e, 0xc4, 0xb6, 0x6f, 0x60, 0xa7, 0x69, 0xb4, 0xb1, 0xdf, 0x2e, 0x2d, 0x30, 0x82,
		0x6a, 0xb2, 0x94, 0xd0, 0xcf, 0x32, 0xc5, 0x0d, 0xa9, 0x57, 0xe3, 0x6a, 0x15, 0xa7, 0x79, 0x03,
		0xfb, 0x6d, 0xad, 0x0c, 0xa7, 0x39, 0x8b, 0x1f, 0x50, 0xcb, 0x69, 0x19, 0x66, 0x9b, 0x98, 0x47,
		0x46, 0x18, 0x1c, 0x3e, 0x57, 0xba, 0x3f, 0xde, 0x3f, 0xb7, 0xb0, 0xc1, 0x75, 0xd6, 0x98, 0xca,
		0x7e, 0x70, 0xf8, 0x9c, 0xd6, 0x80, 0x02, 0x9b, 0x8c, 0x8e, 0x75, 0x87, 0x18, 0x87, 0x2e, 0xe5,
		0xa5, 0xb1, 0x38, 0x22, 0x35, 0xc5, 0x3c, 0xb8, 0xba, 0x2b, 0x01, 0xdb, 0x6e, 0x93, 0x94, 0x33,
		0x8d, 0x7a, 0xad, 0xb6, 0xae, 0xe7, 0x15, 0xcb, 0x75, 0x97, 0xb2, 0x80, 0x6a, 0xb9, 0x91, 0x83,
		0xf3, 0x22, 0xa0, 0x5a, 0xae, 0x72, 0xef, 0x15, 0x98, 0x37, 0x4d, 0x31, 0x66, 0xcb, 0x34, 0xe4,
		0x19, 0xcb, 0x2f, 0xa1, 0x3e, 0x67, 0x99, 0xe6, 0x86, 0x50, 0x90, 0x31, 0xee, 0x6b, 0xcf, 0xc3,
		0xa9, 0x9e, 0xb3, 0xe2, 0xc0, 0xb9, 0xa1, 0x51, 0x0e, 0x42, 0xaf, 0xc0, 0xbc, 0xd7, 0x1d, 0x06,
		0x6a, 0x7d, 0x3d, 0x7a, 0xdd, 0x41, 0xd8, 0xb3, 0xb0, 0xe0, 0xb5, 0xbd, 0x61, 0xdc, 0xc5, 0x38,
		0x4e, 0xf3, 0xda, 0xde, 0x20, 0xf0, 0x11, 0x7e, 0xe0, 0xa6, 0xc4, 0xc4, 0x01, 0x69, 0x96, 0xce,
		0xc4, 0xd5, 0x63, 0x0d, 0xda, 0x25, 0x40, 0xa6, 0x69, 0x10, 0x07, 0x1f, 0xd8, 0xc4, 0xc0, 0x94,
		0x38, 0xd8, 0x2f, 0x9d, 0x8f, 0x2b, 0x17, 0x4d, 0xb3, 0xc6, 0x5b, 0x2b, 0xbc, 0x51, 0xbb, 0x08,
		0x73, 0xee, 0xc1, 0xab, 0xa6, 0x08, 0x49, 0xc3, 0xa3, 0xe4, 0xd0, 0x7a, 0xad, 0xf4, 0x30, 0xf7,
		0xef, 0x2c, 0x6b, 0xe0, 0x01, 0x59, 0xe7, 0x62, 0xed, 0x71, 0x40, 0xa6, 0xdf, 0xc6, 0xd4, 0xe3,
		0x39, 0xd9, 0xf7, 0xb0, 0x49, 0x4a, 0x8f, 0x08, 0x55, 0x21, 0xdf, 0x51, 0x62, 0xb6, 0x24, 0xfc,
		0x63, 0xeb, 0x30, 0x50, 0x8c, 0x8f, 0x89, 0x25, 0xc1, 0x65, 0x92, 0x6d, 0x05, 0x10, 0x73, 0x45,
		0x5f, 0xc7, 0x2b, 0x5c, 0xad, 0xe8, 0xb5, 0xbd, 0x78, 0xbf, 0x0f, 0xc1, 0x0c, 0xd3, 0xec, 0x75,
		0xfa, 0xb8, 0xd8, 0x90, 0x79, 0xed, 0x58, 0x8f, 0x1f, 0xd9, 0xde, 0x78, 0xb9, 0x0c, 0x85, 0x78,
		0x7c, 0x6a, 0x39, 0x10, 0x11, 0x8a, 0x12, 0x6c, 0xb3, 0xb2, 0xb6, 0xbb, 0xce, 0xb6, 0x19, 0x9f,
		0xa9, 0xa1, 0x24, 0xdb, 0xee, 0x6c, 0x6d, 0xee, 0xd5, 0x0c, 0x7d, 0x7f, 0x67, 0x6f, 0x73, 0xbb,
		0x86, 0x52, 0xf1, 0x7d, 0xf5, 0xb7, 0x93, 0x50, 0xec, 0x3f, 0x22, 0x69, 0x3f, 0x09, 0x67, 0xd4,
		0x7d, 0x86, 0x4f, 0x02, 0xe3, 0xd8, 0xa2, 0x7c, 0xc9, 0x74, 0xb0, 0x28, 0x5f, 0xd1, 0xa4, 0x2d,
		0x48, 0xad, 0x06, 0x09, 0x6e, 0x59, 0x94, 0x2d, 0x88, 0x0e, 0x0e, 0xb4, 0x2d, 0x38, 0xef, 0xb8,
		0x86, 0x1f, 0x60, 0xa7, 0x89, 0x69, 0xd3, 0xe8, 0xdd, 0x24, 0x19, 0xd8, 0x34, 0x89, 0xef, 0xbb,
		0xa2, 0x54, 0x45, 0x2c, 0x0f, 0x38, 0x6e, 0x43, 0x2a, 0xf7, 0x72, 0x78, 0x45, 0xaa, 0x0e, 0x04,
		0x58, 0xea, 0xa4, 0x00, 0xbb, 0x1f, 0x72, 0x1d, 0xec, 0x19, 0xc4, 0x09, 0x68, 0x97, 0x6f, 0x8c,
		0xb3, 0x7a, 0xb6, 0x83, 0xbd, 0x1a, 0x7b, 0xfe, 0x78, 0xce, 0x27, 0xff, 0x9c, 0x82, 0x42, 0x7c,
		0x73, 0xcc, 0xce, 0x1a, 0x26, 0xaf, 0x23, 0x09, 0x9e, 0x69, 0x1e, 0xba, 0xeb, 0x56, 0x7a, 0x75,
		0x8d, 0x15, 0x98, 0xf2, 0x94, 0xd8, 0xb2, 0xea, 0x02, 0xc9, 0x8a, 0x3b, 0xcb, 0x2d, 0x44, 0x6c,
		0x11, 0xb2, 0xba, 0x7c, 0xd2, 0x36, 0x60, 0xea, 0x55, 0x9f, 0x73, 0x4f, 0x71, 0xee, 0x87, 0xef,
		0xce, 0x7d, 0xb3, 0xc1, 0xc9, 0x73, 0x37, 0x1b, 0xc6, 0xce, 0xae, 0xbe, 0x5d, 0xd9, 0xd2, 0x25,
		0x5c, 0x3b, 0x0b, 0x69, 0x1b, 0xdf, 0xe9, 0xf6, 0x97, 0x22, 0x2e, 0x9a, 0xd4, 0xf1, 0x67, 0x21,
		0x7d, 0x4c, 0xf0, 0x51, 0x7f, 0x01, 0xe0, 0xa2, 0x8f, 0x30, 0xf4, 0x2f, 0x41, 0x86, 0xfb, 0x4b,
		0x03, 0x90, 0x1e, 0x43, 0xf7, 0x69, 0x59, 0x48, 0xaf, 0xed, 0xea, 0x2c, 0xfc, 0x11, 0x14, 0x84,
		0xd4, 0xa8, 0x6f, 0xd6, 0xd6, 0x6a, 0x28, 0xb9, 0x7c, 0x05, 0xa6, 0x84, 0x13, 0xd8, 0xd2, 0x88,
		0xdc, 0x80, 0xee, 0x93, 0x8f, 0x92, 0x23, 0xa1, 0x5a, 0xf7, 0xb7, 0xab, 0x35, 0x1d, 0x25, 0xe3,
		0xd3, 0xeb, 0x43, 0x21, 0xbe, 0x2f, 0xfe, 0x78, 0x62, 0xea, 0x6f, 0x13, 0x90, 0x8f, 0xed, 0x73,
		0xd9, 0x06, 0x05, 0xdb, 0xb6, 0x7b, 0x6c, 0x60, 0xdb, 0xc2, 0xbe, 0x0c, 0x0a, 0xe0, 0xa2, 0x0a,
		0x93, 0x4c, 0x3a, 0x69, 0x1f, 0x8b, 0xf1, 0x6f, 0x27, 0x00, 0x0d, 0x6e, 0x31, 0x07, 0x0c, 0x4c,
		0xfc, 0x58, 0x0d, 0x7c, 0x2b, 0x01, 0xc5, 0xfe, 0x7d, 0xe5, 0x80, 0x79, 0x17, 0x7e, 0xac, 0xe6,
		0xfd, 0x4b, 0x12, 0x66, 0xfa, 0x76, 0x93, 0x93, 0x5a, 0xf7, 0x39, 0x98, 0xb3, 0x9a, 0xa4, 0xe3,
		0xb9, 0x01, 0x71, 0xcc, 0xae, 0x61, 0x93, 0xdb, 0xc4, 0x2e, 0x2d, 0xf3, 0x44, 0x71, 0xe9, 0xee,
		0xfb, 0xd5, 0xd5, 0xcd, 0x1e, 0x6e, 0x8b, 0xc1, 0xca, 0xf3, 0x9b, 0xeb, 0xb5, 0xed, 0xfa, 0xee,
		0x5e, 0x6d, 0x67, 0xed, 0x15, 0x63, 0x7f, 0xe7, 0xd3, 0x3b, 0xbb, 0xb7, 0x76, 0x74, 0x64, 0x0d,
		0xa8, 0x7d, 0x84, 0x4b, 0xbd, 0x0e, 0x68, 0xd0, 0x28, 0xed, 0x0c, 0x8c, 0x32, 0x0b, 0xdd, 0xa7,
		0xcd, 0xc3, 0xec, 0xce, 0xae, 0xd1, 0xd8, 0x5c, 0xaf, 0x19, 0xb5, 0xeb, 0xd7, 0x6b, 0x6b, 0x7b,
		0x0d, 0x71, 0x03, 0x11, 0x69, 0xef, 0xf5, 0x2f, 0xea, 0x37, 0x53, 0x30, 0x3f, 0xc2, 0x12, 0xad,
		0x22, 0xcf, 0x0e, 0xe2, 0x38, 0xf3, 0xe4, 0x24, 0xd6, 0xaf, 0xb2, 0x92, 0x5f, 0xc7, 0x34, 0x90,
		0x47, 0x8d, 0xc7, 0x81, 0x79, 0xc9, 0x09, 0xac, 0x43, 0x8b, 0x50, 0x79, 0x61, 0x23, 0x0e, 0x14,
		0xb3, 0x3d, 0xb9, 0xb8, 0xb3, 0xf9, 0x04, 0x68, 0x9e, 0xeb, 0x5b, 0x81, 0x75, 0x9b, 0x18, 0x96,
		0xa3, 0x6e, 0x77, 0xd8, 0x01, 0x23, 0xad, 0x23, 0xd5, 0xb2, 0xe9, 0x04, 0x91, 0xb6, 0x43, 0x5a,
		0x78, 0x40, 0x9b, 0x25, 0xf0, 0x94, 0x8e, 0x54, 0x4b, 0xa4, 0x7d, 0x01, 0x0a, 0x4d, 0x37, 0x64,
		0xbb, 0x2e, 0xa1, 0xc7, 0xea, 0x45, 0x42, 0xcf, 0x0b, 0x59, 0xa4, 0x22, 0xf7, 0xd3, 0xbd, 0x6b,
		0xa5, 0x82, 0x9e, 0x17, 0x32, 0xa1, 0xf2, 0x18, 0xcc, 0xe2, 0x56, 0x8b, 0x32, 0x72, 0x45, 0x24,
		0x4e, 0x08, 0xc5, 0x48, 0xcc, 0x15, 0x17, 0x6f, 0x42, 0x56, 0xf9, 0x81, 0x95, 0x64, 0xe6, 0x09,
		0xc3, 0x13, 0xc7, 0xde, 0xe4, 0x4a, 0x4e, 0xcf, 0x3a, 0xaa, 0xf1, 0x02, 0x14, 0x2c, 0xdf, 0xe8,
		0xdd, 0x92, 0x27, 0x97, 0x92, 0x2b, 0x59, 0x3d, 0x6f, 0xf9, 0xd1, 0x0d, 0xe3, 0xf2, 0x3b, 0x49,
		0x28, 0xf6, 0xdf, 0xf2, 0x6b, 0xeb, 0x90, 0xb5, 0x5d, 0x13, 0xf3, 0xd0, 0x12, 0xaf, 0x98, 0x56,
		0xc6, 0xbc, 0x18, 0x58, 0xdd, 0x92, 0xfa, 0x7a, 0x84, 0x5c, 0xfc, 0x4e, 0x02, 0xb2, 0x4a, 0xac,
		0x9d, 0x86, 0xb4, 0x87, 0x83, 0x36, 0xa7, 0xcb, 0x54, 0x93, 0x28, 0xa1, 0xf3, 0x67, 0x26, 0xf7,
		0x3d, 0xec, 0xf0, 0x10, 0x90, 0x72, 0xf6, 0xcc, 0xe6, 0xd5, 0x26, 0xb8, 0xc9, 0x8f, 0x1f, 0x6e,
		0xa7, 0x43, 0x9c, 0xc0, 0x57, 0xf3, 0x2a, 0xe5, 0x6b, 0x52, 0xac, 0x3d, 0x01, 0x73, 0x01, 0xc5,
		0x96, 0xdd, 0xa7, 0x9b, 0xe6, 0xba, 0x48, 0x35, 0x44, 0xca, 0x65, 0x38, 0xab, 0x78, 0x9b, 0x24,
		0xc0, 0x66, 0x9b, 0x34, 0x7b, 0xa0, 0x29, 0x7e, 0xcd, 0x70, 0x46, 0x2a, 0xac, 0xcb, 0x76, 0x85,
		0x5d, 0xfe, 0x6e, 0x02, 0xe6, 0xd4, 0x81, 0xa9, 0x19, 0x39, 0x6b, 0x1b, 0x00, 0x3b, 0x8e, 0x1b,
		0xc4, 0xdd, 0x35, 0x1c, 0xca, 0x43, 0xb8, 0xd5, 0x4a, 0x04, 0xd2, 0x63, 0x04, 0x8b, 0x1d, 0x80,
		0x5e, 0xcb, 0x89, 0x6e, 0x3b, 0x0f, 0x79, 0xf9, 0x0a, 0x87, 0xbf, 0x07, 0x14, 0x47, 0x6c, 0x10,
		0x22, 0x76, 0xb2, 0xd2, 0x16, 0x20, 0x73, 0x40, 0x5a, 0x96, 0x23, 0x2f, 0x66, 0xc5, 0x83, 0xba,
		0x08, 0x49, 0x47, 0x17, 0x21, 0xd5, 0xcf, 0xc2, 0xbc, 0xe9, 0x76, 0x06, 0xcd, 0xad, 0xa2, 0x81,
		0x63, 0xbe, 0x7f, 0x23, 0xf1, 0x19, 0xe8, 0x6d, 0x31, 0x7f, 0x98, 0x48, 0xfc, 0x4e, 0x32, 0xb5,
		0x51, 0xaf, 0x7e, 0x3d, 0xb9, 0xb8, 0x21, 0xa0, 0x75, 0x35, 0x52, 0x9d, 0x1c, 0xda, 0xc4, 0x64,
		0xd6, 0xc3, 0x0f, 0x1e, 0x85, 0x27, 0x5b, 0x56, 0xd0, 0x0e, 0x0f, 0x56, 0x4d, 0xb7, 0x73, 0xa9,
		0xe5, 0xb6, 0xdc, 0xde, 0xab, 0x4f, 0xf6, 0xc4, 0x1f, 0xf8, 0x3f, 0xf9, 0xfa, 0x33, 0x17, 0x49,
		0x17, 0xc7, 0xbe, 0x2b, 0x2d, 0xef, 0xc0, 0xbc, 0x54, 0x36, 0xf8, 0xfb, 0x17, 0x71, 0x8a, 0xd0,
		0xee, 0x7a, 0x87, 0x55, 0xfa, 0xc6, 0xbb, 0xbc, 0x5c, 0xeb, 0x73, 0x12, 0xca, 0xda, 0xc4, 0x41,
		0xa3, 0xac, 0xc3, 0xa9, 0x3e, 0x3e, 0xb1, 0x34, 0x09, 0x1d, 0xc3, 0xf8, 0x6d, 0xc9, 0x38, 0x1f,
		0x63, 0x6c, 0x48, 0x68, 0x79, 0x0d, 0x66, 0xee, 0x85, 0xeb, 0xef, 0x25, 0x57, 0x81, 0xc4, 0x49,
		0x36, 0x60, 0x96, 0x93, 0x98, 0xa1, 0x1f, 0xb8, 0x1d, 0x9e, 0xf7, 0xee, 0x4e, 0xf3, 0x0f, 0xef,
		0x8a, 0xb5, 0x52, 0x64, 0xb0, 0xb5, 0x08, 0x55, 0x2e, 0x03, 0x7f, 0xe5, 0xd4, 0x24, 0xa6, 0x3d,
		0x86, 0xe1, 0x1f, 0xa5, 0x21, 0x91, 0x7e, 0xf9, 0x25, 0x58, 0x60, 0xff, 0x79, 0x5a, 0x8a, 0x5b,
		0x32, 0xfe, 0xc2, 0xab, 0xf4, 0xdd, 0x37, 0xc4, 0x72, 0x9c, 0x8f, 0x08, 0x62, 0x36, 0xc5, 0x66,
		0xb1, 0x45, 0x82, 0x80, 0x50, 0xdf, 0xc0, 0xf6, 0x28, 0xf3, 0x62, 0x37, 0x06, 0xa5, 0xaf, 0xbc,
		0xd7, 0x3f, 0x8b, 0x1b, 0x02, 0x59, 0xb1, 0xed, 0xf2, 0x3e, 0x9c, 0x19, 0x11, 0x15, 0x13, 0x70,
		0xbe, 0x29, 0x39, 0x17, 0x86, 0x22, 0x83, 0xd1, 0xd6, 0x41, 0xc9, 0xa3, 0xb9, 0x9c, 0x80, 0xf3,
		0x37, 0x25, 0xa7, 0x26, 0xb1, 0x6a, 0x4a, 0x19, 0xe3, 0x4d, 0x98, 0xbb, 0x4d, 0xe8, 0x81, 0xeb,
		0xcb, 0x5b, 0x9a, 0x09, 0xe8, 0xde, 0x92, 0x74, 0xb3, 0x12, 0xc8, 0xaf, 0x6d, 0x18, 0xd7, 0xf3,
		0x90, 0x3d, 0xc4, 0x26, 0x99, 0x80, 0xe2, 0xab, 0x92, 0x62, 0x9a, 0xe9, 0x33, 0x68, 0x05, 0x0a,
		0x2d, 0x57, 0x56, 0xa6, 0xf1, 0xf0, 0xb7, 0x25, 0x3c, 0xaf, 0x30, 0x92, 0xc2, 0x73, 0xbd, 0xd0,
		0x66, 0x65, 0x6b, 0x3c, 0xc5, 0x6f, 0x29, 0x0a, 0x85, 0x91, 0x14, 0xf7, 0xe0, 0xd6, 0xaf, 0x29,
		0x0a, 0x3f, 0xe6, 0xcf, 0x17, 0x20, 0xef, 0x3a, 0x76, 0xd7, 0x75, 0x26, 0x31, 0xe2, 0xb7, 0x25,
		0x03, 0x48, 0x08, 0x23, 0xb8, 0x06, 0xb9, 0x49, 0x27, 0xe2, 0x77, 0xdf, 0x53, 0xcb, 0x43, 0xcd,
		0xc0, 0x06, 0xcc, 0xaa, 0x04, 0x65, 0xb9, 0xce, 0x04, 0x14, 0xbf, 0x27, 0x29, 0x8a, 0x31, 0x98,
		0x1c, 0x46, 0x40, 0xfc, 0xa0, 0x45, 0x26, 0x21, 0x79, 0x47, 0x0d, 0x43, 0x42, 0xa4, 0x2b, 0x0f,
		0x88, 0x63, 0xb6, 0x27, 0x63, 0xf8, 0x7d, 0xe5, 0x4a, 0x85, 0x61, 0x14, 0x6b, 0x30, 0xd3, 0xc1,
		0xd4, 0x6f, 0x63, 0x7b, 0xa2, 0xe9, 0xf8, 0x03, 0xc9, 0x51, 0x88, 0x40, 0xd2, 0x23, 0xa1, 0x73,
		0x2f, 0x34, 0x5f, 0x57, 0x1e, 0x89, 0xc1, 0xe4, 0xd2, 0xf3, 0x03, 0x7e, 0xa5, 0x75, 0x2f, 0x6c,
		0x7f, 0xa8, 0x96, 0x9e, 0xc0, 0x6e, 0xc7, 0x19, 0xaf, 0x41, 0xce, 0xb7, 0xee, 0x4c, 0x44, 0xf3,
		0x47, 0x6a, 0xa6, 0x39, 0x80, 0x81, 0x5f, 0x81, 0xb3, 0x23, 0xcb, 0xc4, 0x04, 0x64, 0x7f, 0x2c,
		0xc9, 0x4e, 0x8f, 0x28, 0x15, 0x32, 0x25, 0xdc, 0x2b, 0xe5, 0x9f, 0xa8, 0x94, 0x40, 0x06, 0xb8,
		0xea, 0xec, 0xac, 0xe0, 0xe3, 0xc3, 0x7b, 0xf3, 0xda, 0x9f, 0x2a, 0xaf, 0x09, 0x6c, 0x9f, 0xd7,
		0xf6, 0xe0, 0xb4, 0x64, 0xbc, 0xb7, 0x79, 0xfd, 0x33, 0x95, 0x58, 0x05, 0x7a, 0xbf, 0x7f, 0x76,
		0x3f, 0x0b, 0x8b, 0x91, 0x3b, 0xd5, 0xa6, 0xd4, 0x37, 0x3a, 0xd8, 0x9b, 0x80, 0xf9, 0x1b, 0x92,
		0x59, 0x65, 0xfc, 0x68, 0x57, 0xeb, 0x6f, 0x63, 0x8f, 0x91, 0xbf, 0x0c, 0x25, 0x45, 0x1e, 0x3a,
		0x94, 0x98, 0x6e, 0xcb, 0xb1, 0xee, 0x90, 0xe6, 0x04, 0xd4, 0x7f, 0x3e, 0x30, 0x55, 0xfb, 0x31,
		0x38, 0x63, 0xde, 0x04, 0x14, 0xed, 0x55, 0x0c, 0xab, 0xe3, 0xb9, 0x34, 0x18, 0xc3, 0xf8, 0x4d,
		0x35, 0x53, 0x11, 0x6e, 0x93, 0xc3, 0xca, 0x35, 0x28, 0xf2, 0xc7, 0x49, 0x43, 0xf2, 0x2f, 0x24,
		0xd1, 0x4c, 0x0f, 0x25, 0x13, 0x87, 0xe9, 0x76, 0x3c, 0x4c, 0x27, 0xc9, 0x7f, 0x7f, 0xa9, 0x12,
		0x87, 0x84, 0xc8, 0xc4, 0x11, 0x74, 0x3d, 0xc2, 0xaa, 0xfd, 0x04, 0x0c, 0xdf, 0x52, 0x89, 0x43,
		0x61, 0x24, 0x85, 0xda, 0x30, 0x4c, 0x40, 0xf1, 0x57, 0x8a, 0x42, 0x61, 0x18, 0xc5, 0x8b, 0xbd,
		0x42, 0x4b, 0x49, 0xcb, 0xf2, 0x03, 0x2a, 0xb6, 0xc2, 0x77, 0xa7, 0xfa, 0xeb, 0xf7, 0xfa, 0x37,
		0x61, 0x7a, 0x0c, 0x5a, 0xbe, 0x09, 0xb3, 0x03, 0x5b, 0x0c, 0x6d, 0xdc, 0xf7, 0x2b, 0xa5, 0x9f,
		0xfd, 0x40, 0x26, 0xa3, 0xfe, 0x1d, 0x46, 0x79, 0x8b, 0xcd, 0x7b, 0xff, 0x3e, 0x60, 0x3c, 0xd9,
		0x1b, 0x1f, 0x44, 0x53, 0xdf, 0xb7, 0x0d, 0x28, 0x5f, 0x87, 0x99, 0xbe, 0x3d, 0xc0, 0x78, 0xaa,
		0xcf, 0x4b, 0xaa, 0x42, 0x7c, 0x0b, 0x50, 0xbe, 0x02, 0x69, 0x56, 0xcf, 0xc7, 0xc3, 0x7f, 0x4e,
		0xc2, 0xb9, 0x7a, 0xf9, 0x93, 0x90, 0x55, 0x75, 0x7c, 0x3c, 0xf4, 0xe7, 0x25, 0x34, 0x82, 0x30,
		0xb8, 0xaa, 0xe1, 0xe3, 0xe1, 0xbf, 0xa0, 0xe0, 0x0a, 0xc2, 0xe0, 0x93, 0xbb, 0xf0, 0xef, 0x7e,
		0x31, 0x2d, 0xf3, 0xb0, 0xf2, 0xdd, 0x35, 0x98, 0x96, 0xc5, 0x7b, 0x3c, 0xfa, 0x0b, 0xb2, 0x73,
		0x85, 0x28, 0x3f, 0x0b, 0x99, 0x09, 0x1d, 0xfe, 0x4b, 0x12, 0x2a, 0xf4, 0xcb, 0x6b, 0x90, 0x8f,
		0x15, 0xec, 0xf1, 0xf0, 0x5f, 0x96, 0xf0, 0x38, 0x8a, 0x99, 0x2e, 0x0b, 0xf6, 0x78, 0x82, 0x5f,
		0x51, 0xa6, 0x4b, 0x04, 0x73, 0x9b, 0xaa, 0xd5, 0xe3, 0xd1, 0xbf, 0xaa, 0xbc, 0xae, 0x20, 0xe5,
		0x17, 0x20, 0x17, 0xe5, 0xdf, 0xf1, 0xf8, 0x2f, 0x4a, 0x7c, 0x0f, 0xc3, 0x3c, 0x10, 0xcb, 0xff,
		0xe3, 0x29, 0x7e, 0x4d, 0x79, 0x20, 0x86, 0x62, 0xcb, 0x68, 0xb0, 0xa6, 0x8f, 0x67, 0xfa, 0x75,
		0xb5, 0x8c, 0x06, 0x4a, 0x3a, 0x9b, 0x4d, 0x9e, 0x06, 0xc7, 0x53, 0xfc, 0x86, 0x9a, 0x4d, 0xae,
		0xcf, 0xcc, 0x18, 0x2c, 0x92, 0xe3, 0x39, 0xbe, 0xa4, 0xcc, 0x18, 0xa8, 0x91, 0xe5, 0x3a, 0x68,
		0xc3, 0x05, 0x72, 0x3c, 0xdf, 0x97, 0x25, 0xdf, 0xdc, 0x50, 0x7d, 0x2c, 0xdf, 0x82, 0xd3, 0xa3,
		0x8b, 0xe3, 0x78, 0xd6, 0xaf, 0x7c, 0x30, 0x70, 0x9c, 0x89, 0xd7, 0xc6, 0xf2, 0x5e, 0x2f, 0xcb,
		0xc6, 0x0b, 0xe3, 0x78, 0xda, 0x37, 0x3f, 0xe8, 0x4f, 0xb4, 0xf1, 0xba, 0x58, 0xae, 0x00, 0xf4,
		0x6a, 0xd2, 0x78, 0xae, 0xb7, 0x24, 0x57, 0x0c, 0xc4, 0x96, 0x86, 0x2c, 0x49, 0xe3, 0xf1, 0x5f,
		0x55, 0x4b, 0x43, 0x22, 0xd8, 0xd2, 0x50, 0xd5, 0x68, 0x3c, 0xfa, 0x6d, 0xb5, 0x34, 0x14, 0xa4,
		0x7c, 0x0d, 0xb2, 0x4e, 0x68, 0xdb, 0x2c, 0xb6, 0xb4, 0xbb, 0x7f, 0x92, 0x55, 0xfa, 0x8f, 0x0f,
		0x25, 0x58, 0x01, 0xca, 0x57, 0x20, 0x43, 0x3a, 0x07, 0xa4, 0x39, 0x0e, 0xf9, 0x9f, 0x1f, 0xaa,
		0x7c, 0xc2, 0xb4, 0xcb, 0x2f, 0x00, 0x88, 0xc3, 0x34, 0x7f, 0x51, 0x34, 0x06, 0xfb, 0x5f, 0x1f,
		0xca, 0x8f, 0x25, 0x7a, 0x90, 0x1e, 0x81, 0xf8, 0xf4, 0xe2, 0xee, 0x04, 0xef, 0xf5, 0x13, 0xf0,
		0x03, 0xf8, 0xf3, 0x30, 0xfd, 0xaa, 0xef, 0x3a, 0x01, 0x6e, 0x8d, 0x43, 0xff, 0xb7, 0x44, 0x2b,
		0x7d, 0xe6, 0xb0, 0x8e, 0x4b, 0x49, 0x80, 0x5b, 0xfe, 0x38, 0xec, 0xff, 0x48, 0x6c, 0x04, 0x60,
		0x60, 0x13, 0xfb, 0xc1, 0x24, 0xe3, 0xfe, 0xbe, 0x02, 0x2b, 0x00, 0x33, 0x9a, 0xfd, 0x3f, 0x22,
		0xdd, 0x71, 0xd8, 0xf7, 0x95, 0xd1, 0x52, 0xbf, 0xfc, 0x49, 0xc8, 0xb1, 0xbf, 0xe2, 0x0b, 0xa8,
		0x31, 0xe0, 0xff, 0x95, 0xe0, 0x1e, 0x82, 0xf5, 0xec, 0x07, 0xcd, 0xc0, 0x1a, 0xef, 0xec, 0xff,
		0x93, 0x33, 0xad, 0xf4, 0xcb, 0x15, 0xc8, 0xfb, 0x41, 0xb3, 0x19, 0xca, 0x1d, 0xcd, 0x18, 0xf8,
		0x0f, 0x3e, 0x8c, 0x0e, 0xb9, 0x11, 0xa6, 0x7a, 0x61, 0xf4, 0x7d, 0x1d, 0x6c, 0xb8, 0x1b, 0xae,
		0xb8, 0xa9, 0x83, 0x7f, 0x2a, 0xc2, 0x69, 0xe6, 0xa3, 0x63, 0x6a, 0xf1, 0xcb, 0x73, 0xcb, 0x77,
		0x1d, 0x79, 0xbd, 0x96, 0xee, 0x60, 0xcb, 0x59, 0xbc, 0xb7, 0x3b, 0xb9, 0xe5, 0x2f, 0x25, 0x00,
		0xed, 0x45, 0x7c, 0x75, 0xce, 0xa7, 0x3d, 0x0c, 0x33, 0xb7, 0x2c, 0x87, 0xb0, 0x25, 0x45, 0x58,
		0x35, 0xe6, 0xef, 0x98, 0x0a, 0x7a, 0xbf, 0x50, 0x5b, 0x86, 0x42, 0xa3, 0xed, 0x12, 0x1b, 0x9b,
		0xa4, 0x4a, 0xe4, 0xb7, 0x53, 0x05, 0xbd, 0x4f, 0xa6, 0x3d, 0x0d, 0xf9, 0xba, 0x6b, 0x1e, 0x91,
		0x40, 0x77, 0x7d, 0xa2, 0xbe, 0x4c, 0x9a, 0x5b, 0x65, 0x96, 0xae, 0xc6, 0x1a, 0xf4, 0xb8, 0x56,
		0x39, 0xfd, 0xfe, 0xd7, 0xce, 0x27, 0x96, 0xbf, 0x93, 0xe9, 0xc3, 0x6a, 0x4b, 0x90, 0x6f, 0x98,
		0x98, 0x56, 0x43, 0xbf, 0x11, 0xb8, 0x9e, 0xfa, 0x10, 0x27, 0x26, 0x62, 0x66, 0x57, 0x71, 0xb3,
		0x45, 0x1a, 0x6d, 0xd7, 0xf3, 0x2c, 0xa7, 0xc5, 0x2d, 0x4a, 0xe9, 0xfd, 0x42, 0xed, 0x01, 0xc8,
		0xad, 0x63, 0xcb, 0xef, 0x36, 0x6c, 0xf9, 0x76, 0x2f, 0xa5, 0xf7, 0x04, 0x7c, 0x50, 0xe1, 0x41,
		0x07, 0x53, 0xcb, 0x21, 0x0d, 0x7c, 0xcc, 0x6f, 0x53, 0x53, 0x7a, 0x9f, 0x8c, 0x5b, 0xd2, 0xb1,
		0x6c, 0xb2, 0xc5, 0x77, 0x8d, 0xe2, 0xbd, 0xaf, 0x1e, 0x17, 0x69, 0xab, 0x90, 0xdd, 0x34, 0x5d,
		0xe7, 0x86, 0x1b, 0xbd, 0x5d, 0xd6, 0xc4, 0x98, 0xab, 0xa1, 0x6d, 0x77, 0x1b, 0xa1, 0x43, 0x2d,
		0x9f, 0xe8, 0x91, 0x8e, 0x76, 0x11, 0xb2, 0x2f, 0x61, 0xa7, 0x1e, 0x52, 0x5f, 0xbc, 0x3a, 0x28,
		0x5e, 0x2e, 0x0a, 0x7d, 0xd6, 0x5a, 0xa1, 0x66, 0x5b, 0x8f, 0xda, 0xd9, 0x28, 0xb7, 0x89, 0x13,
		0xd6, 0xb1, 0x47, 0xa8, 0x69, 0x5b, 0x1e, 0xff, 0xec, 0x3b, 0xa7, 0xf7, 0x0b, 0x99, 0x8d, 0x55,
		0x42, 0x02, 0x9b, 0xd4, 0xdd, 0x23, 0x42, 0xf9, 0x57, 0xd9, 0x39, 0x3d, 0x2e, 0xd2, 0x16, 0x21,
		0x7b, 0xcb, 0x6a, 0xd5, 0xa9, 0xd5, 0x54, 0x9f, 0x57, 0x47, 0xcf, 0x6c, 0xda, 0xd6, 0xad, 0xdb,
		0x2e, 0x35, 0xc9, 0x75, 0x6c, 0x51, 0xfe, 0x4d, 0x4e, 0x51, 0x4d, 0x5b, 0xac, 0x41, 0x8f, 0x6b,
		0x69, 0x2b, 0x30, 0x7b, 0xdd, 0xb6, 0x5a, 0xed, 0xa0, 0x8e, 0x29, 0x36, 0xdb, 0x61, 0x40, 0x4a,
		0x85, 0xa5, 0xd4, 0xca, 0xb4, 0x3e, 0x28, 0x66, 0x5d, 0xb3, 0xe8, 0xd0, 0xb1, 0x49, 0x4a, 0x33,
		0x5c, 0x25, 0x7a, 0xd6, 0xce, 0x01, 0x6c, 0xb9, 0x87, 0xc1, 0x8b, 0x21, 0xa6, 0xb4, 0x5b, 0x2a,
		0x2e, 0xa5, 0x56, 0x0a, 0x7a, 0x4c, 0xc2, 0x06, 0xb6, 0x87, 0x5f, 0xb3, 0x64, 0xc7, 0xa5, 0x59,
		0xae, 0x10, 0x17, 0x69, 0x8f, 0x42, 0xb1, 0x26, 0x2f, 0xa9, 0xab, 0x21, 0x9f, 0x21, 0xc4, 0xfb,
		0x18, 0x90, 0x32, 0x7b, 0xab, 0xd4, 0x22, 0x87, 0x26, 0xf6, 0x49, 0x15, 0x1f, 0xb8, 0xae, 0x53,
		0x9a, 0xe3, 0x6c, 0x83, 0x62, 0x66, 0xef, 0x36, 0xf6, 0x1a, 0x6d, 0x4c, 0x8f, 0xf8, 0x57, 0x40,
		0x39, 0x3d, 0x7a, 0x66, 0x01, 0xb3, 0x43, 0x82, 0x4d, 0x27, 0x20, 0xd4, 0x0e, 0x9b, 0xa4, 0x34,
		0x2f, 0x36, 0xf0, 0x71, 0x99, 0x08, 0xe8, 0x8b, 0x7e, 0x9f, 0x53, 0x35, 0x80, 0xa9, 0x2d, 0x7c,
		0xdc, 0x25, 0x14, 0xa5, 0xd9, 0xff, 0x5d, 0xbb, 0xb9, 0x8d, 0x1d, 0x94, 0xd1, 0xb2, 0x90, 0xbe,
		0x41, 0x6c, 0x0f, 0x4d, 0x69, 0x39, 0xc8, 0xe8, 0xb8, 0x89, 0x29, 0xca, 0x69, 0xd3, 0x90, 0xaa,
		0xd0, 0x0e, 0x02, 0x26, 0x7b, 0x89, 0x50, 0x9f, 0xa0, 0x3c, 0x53, 0xdc, 0x09, 0x03, 0x1f, 0xcd,
		0x6a, 0x33, 0x90, 0x8b, 0x4c, 0x46, 0xa7, 0x18, 0x5b, 0x1d, 0xb3, 0x25, 0x88, 0x4e, 0x5f, 0xfc,
		0x7c, 0x06, 0xb2, 0x2a, 0x88, 0x18, 0x62, 0xdb, 0x72, 0x9a, 0xe8, 0x3e, 0xa6, 0xf2, 0x69, 0xe2,
		0x38, 0xc4, 0x46, 0x09, 0xfe, 0xce, 0xdf, 0xa5, 0x0e, 0x4a, 0x6a, 0x79, 0x98, 0x6e, 0x58, 0x36,
		0x71, 0x4c, 0x82, 0x52, 0xec, 0x61, 0xcb, 0x3d, 0xf0, 0x03, 0x6e, 0x60, 0x16, 0xd2, 0xbb, 0xb7,
		0x89, 0x34, 0x6f, 0xc7, 0xf5, 0x89, 0x30, 0x6f, 0x07, 0xdf, 0x26, 0x36, 0x9a, 0x66, 0xc2, 0xba,
		0x65, 0xdb, 0x28, 0xcb, 0x84, 0x37, 0x5c, 0xdb, 0xee, 0xa2, 0x9c, 0x56, 0x80, 0xec, 0xba, 0x6b,
		0xb2, 0x0d, 0x3d, 0x41, 0xc0, 0x54, 0xae, 0xbb, 0xf4, 0x48, 0xd8, 0x5d, 0x25, 0x76, 0x80, 0x0a,
		0xbc, 0xe7, 0xd0, 0x0e, 0xd0, 0x0c, 0xfb, 0xb7, 0x17, 0xfa, 0x47, 0xa8, 0xc8, 0x08, 0xd6, 0xda,
		0x96, 0xc7, 0x86, 0xc5, 0x84, 0xc4, 0x09, 0x10, 0x12, 0x26, 0xe2, 0x00, 0xcd, 0xf1, 0x66, 0x37,
		0xa4, 0x01, 0xd2, 0x98, 0x81, 0x7a, 0xe8, 0xe0, 0x63, 0xdc, 0x45, 0xf3, 0xac, 0xb3, 0xed, 0xd0,
		0x3e, 0x20, 0x94, 0x76, 0xd1, 0x82, 0x56, 0x04, 0xa8, 0xbb, 0xb6, 0x15, 0x58, 0xa6, 0x85, 0x1d,
		0x74, 0x8a, 0xa9, 0xca, 0xfd, 0x01, 0x3a, 0xcd, 0x1e, 0xf6, 0x08, 0x36, 0xdb, 0x84, 0xa2, 0x33,
		0x8c, 0x79, 0xcb, 0x3a, 0x0c, 0x50, 0x89, 0xb9, 0x64, 0x1d, 0xb3, 0xc4, 0x86, 0xce, 0xb2, 0x5e,
		0x76, 0x69, 0x93, 0x50, 0xb4, 0xc8, 0xfe, 0xee, 0x59, 0x81, 0x4d, 0xd0, 0xfd, 0xda, 0x2c, 0xe4,
		0x6f, 0xb5, 0x09, 0xb1, 0x0f, 0x30, 0xa5, 0xee, 0x31, 0x7a, 0x80, 0x75, 0x7a, 0xc3, 0xf5, 0x89,
		0x67, 0x79, 0x04, 0x3d, 0xc8, 0x3f, 0x18, 0xc2, 0xd4, 0x23, 0x6c, 0xda, 0xd1, 0x39, 0xc6, 0xcc,
		0x72, 0x0e, 0x3a, 0xcf, 0x5d, 0x66, 0xd9, 0x04, 0x2d, 0x71, 0xeb, 0x6d, 0x37, 0x6c, 0xa2, 0x0b,
		0x62, 0x2e, 0x6c, 0x1b, 0x2d, 0xb3, 0x8e, 0x6f, 0x61, 0xdb, 0x26, 0x01, 0x7a, 0x88, 0x7f, 0x7f,
		0x14, 0xb6, 0x30, 0x45, 0x0f, 0x33, 0xf1, 0x1a, 0xb5, 0x7c, 0xcb, 0x47, 0x8f, 0x30, 0xe5, 0xf5,
		0x30, 0xe8, 0xa2, 0x47, 0x59, 0x27, 0xdb, 0x96, 0x7d, 0xe4, 0xb7, 0xf1, 0x11, 0x41, 0x8f, 0xb1,
		0xb8, 0xd8, 0xc3, 0x1e, 0x5a, 0xe1, 0x1e, 0xb2, 0x71, 0x17, 0x3d, 0xce, 0x86, 0xb7, 0xe6, 0x52,
		0xd7, 0x21, 0x01, 0xba, 0x28, 0x22, 0x83, 0xe0, 0xa3, 0x43, 0xec, 0x07, 0xe8, 0x09, 0x3e, 0x09,
		0xcc, 0x92, 0x4f, 0xf0, 0x86, 0xd0, 0xb6, 0x9b, 0xee, 0x1d, 0x42, 0xd1, 0x93, 0xdc, 0x7d, 0x38,
		0x08, 0x28, 0xf1, 0x7d, 0xb4, 0xca, 0xba, 0xde, 0xb6, 0x9c, 0x30, 0x20, 0xe8, 0x12, 0x37, 0xa3,
		0x6d, 0xf9, 0xc4, 0x46, 0x4f, 0x31, 0xea, 0x8a, 0xef, 0x59, 0xd4, 0x72, 0xd0, 0x4f, 0x30, 0x88,
		0xee, 0x86, 0x36, 0x4b, 0x78, 0xe8, 0x32, 0x33, 0xe4, 0x06, 0xee, 0xa0, 0xa7, 0xd9, 0x08, 0xaa,
		0xec, 0x34, 0x82, 0x9e, 0x61, 0x7f, 0xb7, 0x2d, 0x87, 0x50, 0x74, 0xe5, 0xe2, 0x17, 0x13, 0x50,
		0x88, 0xe7, 0x3e, 0x1e, 0x6a, 0xd8, 0x69, 0x62, 0xdb, 0x47, 0xf7, 0x31, 0xaa, 0x46, 0xdb, 0x3d,
		0xe6, 0xe1, 0x9b, 0x60, 0x4d, 0xd7, 0x6d, 0x97, 0x5a, 0x7e, 0x80, 0x92, 0xac, 0xfb, 0xeb, 0xd4,
		0x6a, 0xb6, 0x58, 0x44, 0xb2, 0x78, 0xa0, 0xb8, 0x83, 0xd2, 0x8c, 0xb9, 0xee, 0x52, 0xb3, 0x8d,
		0x32, 0x1c, 0x7b, 0xd4, 0xe5, 0x09, 0x06, 0x4d, 0x31, 0x95, 0x9b, 0xee, 0x11, 0x41, 0xd3, 0x3c,
		0x7c, 0x09, 0x0e, 0xd8, 0x2c, 0xf3, 0xa8, 0x5c, 0xa3, 0xd8, 0x21, 0x28, 0xc7, 0x49, 0xdc, 0x90,
		0x22, 0xa8, 0x66, 0xdf, 0xff, 0xde, 0xb9, 0xc4, 0x0f, 0xbf, 0x77, 0x2e, 0xf1, 0xff, 0x01, 0x00,
		0x00, 0xff, 0xff, 0x88, 0xfd, 0x25, 0x4b, 0xbd, 0x37, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *TypewriterPrison) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&main.TypewriterPrison{")
	if this.WineMessenger != nil {
		s = append(s, "WineMessenger: "+valueToGoStringTypewriterprison(this.WineMessenger, "byte")+",\n")
	}
	if this.ShoelaceBeer != nil {
		s = append(s, "ShoelaceBeer: "+valueToGoStringTypewriterprison(this.ShoelaceBeer, "byte")+",\n")
	}
	if this.PocketRoses != nil {
		s = append(s, "PocketRoses: "+fmt.Sprintf("%#v", this.PocketRoses)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PocketRoses) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 23)
	s = append(s, "&main.PocketRoses{")
	if this.ScarBusStop != nil {
		s = append(s, "ScarBusStop: "+valueToGoStringTypewriterprison(this.ScarBusStop, "string")+",\n")
	}
	if this.BadgeShopping != nil {
		s = append(s, "BadgeShopping: "+valueToGoStringTypewriterprison(this.BadgeShopping, "int64")+",\n")
	}
	if this.DaisySled != nil {
		s = append(s, "DaisySled: "+valueToGoStringTypewriterprison(this.DaisySled, "int64")+",\n")
	}
	if this.SubmarineSaw != nil {
		s = append(s, "SubmarineSaw: "+valueToGoStringTypewriterprison(this.SubmarineSaw, "int64")+",\n")
	}
	if this.SmileLetter != nil {
		s = append(s, "SmileLetter: "+valueToGoStringTypewriterprison(this.SmileLetter, "bool")+",\n")
	}
	if this.IconHope != nil {
		s = append(s, "IconHope: "+valueToGoStringTypewriterprison(this.IconHope, "BullySunrise")+",\n")
	}
	if this.VanPurse != nil {
		s = append(s, "VanPurse: "+valueToGoStringTypewriterprison(this.VanPurse, "HopeArch")+",\n")
	}
	if this.MenuPaperclip != nil {
		s = append(s, "MenuPaperclip: "+fmt.Sprintf("%#v", this.MenuPaperclip)+",\n")
	}
	if this.BeetlePoker != nil {
		s = append(s, "BeetlePoker: "+fmt.Sprintf("%#v", this.BeetlePoker)+",\n")
	}
	if this.WigPride != nil {
		s = append(s, "WigPride: "+fmt.Sprintf("%#v", this.WigPride)+",\n")
	}
	if this.DivorceFair != nil {
		s = append(s, "DivorceFair: "+valueToGoStringTypewriterprison(this.DivorceFair, "DivorceFair")+",\n")
	}
	if this.FlightParachute != nil {
		s = append(s, "FlightParachute: "+fmt.Sprintf("%#v", this.FlightParachute)+",\n")
	}
	if this.BeerRace != nil {
		s = append(s, "BeerRace: "+fmt.Sprintf("%#v", this.BeerRace)+",\n")
	}
	if this.LoftQuarry != nil {
		s = append(s, "LoftQuarry: "+fmt.Sprintf("%#v", this.LoftQuarry)+",\n")
	}
	if this.TaxiDivorce != nil {
		s = append(s, "TaxiDivorce: "+fmt.Sprintf("%#v", this.TaxiDivorce)+",\n")
	}
	if this.ElectionButter != nil {
		s = append(s, "ElectionButter: "+fmt.Sprintf("%#v", this.ElectionButter)+",\n")
	}
	if this.BriefcaseBaboon != nil {
		s = append(s, "BriefcaseBaboon: "+fmt.Sprintf("%#v", this.BriefcaseBaboon)+",\n")
	}
	if this.MapShark != nil {
		s = append(s, "MapShark: "+valueToGoStringTypewriterprison(this.MapShark, "string")+",\n")
	}
	if this.NetInterlude != nil {
		s = append(s, "NetInterlude: "+valueToGoStringTypewriterprison(this.NetInterlude, "bool")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypewriterprison(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func NewPopulatedTypewriterPrison(r randyTypewriterprison, easy bool) *TypewriterPrison {
	this := &TypewriterPrison{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(100)
		this.WineMessenger = make([]byte, v1)
		for i := 0; i < v1; i++ {
			this.WineMessenger[i] = byte(r.Intn(256))
		}
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(100)
		this.ShoelaceBeer = make([]byte, v2)
		for i := 0; i < v2; i++ {
			this.ShoelaceBeer[i] = byte(r.Intn(256))
		}
	}
	if r.Intn(10) != 0 {
		this.PocketRoses = NewPopulatedPocketRoses(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypewriterprison(r, 4)
	}
	return this
}

func NewPopulatedPocketRoses(r randyTypewriterprison, easy bool) *PocketRoses {
	this := &PocketRoses{}
	if r.Intn(10) != 0 {
		v3 := string(randStringTypewriterprison(r))
		this.ScarBusStop = &v3
	}
	if r.Intn(10) != 0 {
		v4 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		this.BadgeShopping = &v4
	}
	if r.Intn(10) != 0 {
		v5 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		this.DaisySled = &v5
	}
	if r.Intn(10) != 0 {
		v6 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		this.SubmarineSaw = &v6
	}
	if r.Intn(10) != 0 {
		v7 := bool(bool(r.Intn(2) == 0))
		this.SmileLetter = &v7
	}
	if r.Intn(10) != 0 {
		v8 := BullySunrise([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}[r.Intn(11)])
		this.IconHope = &v8
	}
	if r.Intn(10) != 0 {
		v9 := HopeArch([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53}[r.Intn(54)])
		this.VanPurse = &v9
	}
	if r.Intn(10) != 0 {
		v10 := r.Intn(10)
		this.MenuPaperclip = make([]string, v10)
		for i := 0; i < v10; i++ {
			this.MenuPaperclip[i] = string(randStringTypewriterprison(r))
		}
	}
	if r.Intn(10) != 0 {
		v11 := r.Intn(10)
		this.BeetlePoker = make([]string, v11)
		for i := 0; i < v11; i++ {
			this.BeetlePoker[i] = string(randStringTypewriterprison(r))
		}
	}
	if r.Intn(10) != 0 {
		v12 := r.Intn(10)
		this.WigPride = make([]string, v12)
		for i := 0; i < v12; i++ {
			this.WigPride[i] = string(randStringTypewriterprison(r))
		}
	}
	if r.Intn(10) != 0 {
		v13 := DivorceFair([]int32{4, 5, 6, 9, 10, 11, 15, 21, 22}[r.Intn(9)])
		this.DivorceFair = &v13
	}
	if r.Intn(10) != 0 {
		v14 := r.Intn(10)
		this.FlightParachute = make([]uint32, v14)
		for i := 0; i < v14; i++ {
			this.FlightParachute[i] = uint32(r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v15 := r.Intn(10)
		this.BeerRace = make([]uint32, v15)
		for i := 0; i < v15; i++ {
			this.BeerRace[i] = uint32(r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v16 := r.Intn(10)
		this.LoftQuarry = make([][]byte, v16)
		for i := 0; i < v16; i++ {
			v17 := r.Intn(100)
			this.LoftQuarry[i] = make([]byte, v17)
			for j := 0; j < v17; j++ {
				this.LoftQuarry[i][j] = byte(r.Intn(256))
			}
		}
	}
	if r.Intn(10) != 0 {
		v18 := r.Intn(10)
		this.TaxiDivorce = make([][]byte, v18)
		for i := 0; i < v18; i++ {
			v19 := r.Intn(100)
			this.TaxiDivorce[i] = make([]byte, v19)
			for j := 0; j < v19; j++ {
				this.TaxiDivorce[i][j] = byte(r.Intn(256))
			}
		}
	}
	if r.Intn(10) != 0 {
		v20 := r.Intn(10)
		this.ElectionButter = make([]uint32, v20)
		for i := 0; i < v20; i++ {
			this.ElectionButter[i] = uint32(r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v21 := r.Intn(10)
		this.BriefcaseBaboon = make([][]byte, v21)
		for i := 0; i < v21; i++ {
			v22 := r.Intn(100)
			this.BriefcaseBaboon[i] = make([]byte, v22)
			for j := 0; j < v22; j++ {
				this.BriefcaseBaboon[i][j] = byte(r.Intn(256))
			}
		}
	}
	if r.Intn(10) != 0 {
		v23 := string(randStringTypewriterprison(r))
		this.MapShark = &v23
	}
	if r.Intn(10) != 0 {
		v24 := bool(bool(r.Intn(2) == 0))
		this.NetInterlude = &v24
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypewriterprison(r, 20)
	}
	return this
}

type randyTypewriterprison interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypewriterprison(r randyTypewriterprison) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypewriterprison(r randyTypewriterprison) string {
	v25 := r.Intn(100)
	tmps := make([]rune, v25)
	for i := 0; i < v25; i++ {
		tmps[i] = randUTF8RuneTypewriterprison(r)
	}
	return string(tmps)
}
func randUnrecognizedTypewriterprison(r randyTypewriterprison, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTypewriterprison(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTypewriterprison(dAtA []byte, r randyTypewriterprison, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTypewriterprison(dAtA, uint64(key))
		v26 := r.Int63()
		if r.Intn(2) == 0 {
			v26 *= -1
		}
		dAtA = encodeVarintPopulateTypewriterprison(dAtA, uint64(v26))
	case 1:
		dAtA = encodeVarintPopulateTypewriterprison(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTypewriterprison(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTypewriterprison(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTypewriterprison(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTypewriterprison(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}

func init() { proto.RegisterFile("typewriterprison.proto", fileDescriptorTypewriterprison) }

var fileDescriptorTypewriterprison = []byte{
	// 1089 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x54, 0x41, 0x77, 0x1b, 0x35,
	0x10, 0xae, 0x6b, 0x27, 0xb1, 0x65, 0x27, 0x99, 0x6e, 0x69, 0x59, 0x4a, 0x49, 0x4d, 0x28, 0xc5,
	0x04, 0x9a, 0x42, 0x0b, 0x17, 0x6e, 0x75, 0x42, 0x5e, 0x0a, 0x71, 0x6a, 0xd6, 0x79, 0xcd, 0x59,
	0xde, 0x9d, 0x78, 0xf5, 0x2c, 0x4b, 0xfb, 0x46, 0x52, 0x83, 0x39, 0xf3, 0x07, 0x38, 0x71, 0xe5,
	0x17, 0xf1, 0x1f, 0xfa, 0x0f, 0x7a, 0xe4, 0xc8, 0x1b, 0xb9, 0x18, 0xbb, 0xb7, 0x9d, 0x6f, 0x3e,
	0xcd, 0x7c, 0xa3, 0xf9, 0x56, 0xe2, 0xae, 0x9f, 0x57, 0x78, 0x4d, 0xca, 0x23, 0x55, 0xa4, 0x9c,
	0x35, 0x87, 0x15, 0x59, 0x6f, 0x93, 0xc6, 0x4c, 0x2a, 0x73, 0xef, 0xf1, 0x44, 0xf9, 0x32, 0x8c,
	0x0f, 0x73, 0x3b, 0x7b, 0x32, 0xb1, 0x13, 0xfb, 0x24, 0x26, 0xc7, 0xe1, 0x2a, 0x46, 0x31, 0x88,
	0x5f, 0x8b, 0x43, 0xfb, 0x7f, 0xd6, 0x04, 0x5c, 0x2c, 0xeb, 0x0d, 0x63, 0xbd, 0xe4, 0xa1, 0xd8,
	0xbe, 0x54, 0x06, 0x07, 0xe8, 0x1c, 0x9a, 0x09, 0x52, 0x5a, 0xeb, 0xd6, 0x7a, 0x9d, 0x6c, 0x1d,
	0x4c, 0xf6, 0x45, 0x67, 0x54, 0x5a, 0xd4, 0x32, 0xc7, 0x3e, 0x22, 0xa5, 0x37, 0x23, 0x69, 0x0d,
	0x4b, 0x9e, 0x89, 0xf6, 0xd0, 0xe6, 0x53, 0xf4, 0x99, 0x75, 0xe8, 0xd2, 0x7a, 0xb7, 0xd6, 0x6b,
	0x3f, 0xbd, 0x75, 0xc8, 0x4a, 0x0f, 0x57, 0x12, 0xd9, 0x2a, 0xeb, 0x87, 0xc6, 0xdb, 0xbf, 0x1e,
	0xd4, 0xf6, 0xff, 0xde, 0x58, 0x3b, 0x9b, 0x74, 0x45, 0x7b, 0x94, 0x4b, 0xea, 0x07, 0x37, 0xf2,
	0xb6, 0x8a, 0x92, 0x5a, 0xd9, 0x2a, 0xc4, 0xb2, 0xfb, 0xb2, 0x98, 0xe0, 0xa8, 0xb4, 0x55, 0xa5,
	0xcc, 0x24, 0x2a, 0xaa, 0x67, 0xeb, 0x60, 0x72, 0x5f, 0xb4, 0x8e, 0xa5, 0x72, 0xf3, 0x91, 0xc6,
	0x22, 0x0a, 0xaa, 0x67, 0xff, 0x03, 0x71, 0xa8, 0x30, 0x9e, 0x49, 0x52, 0x06, 0x47, 0xf2, 0x3a,
	0x6d, 0x44, 0xc2, 0x1a, 0x16, 0x95, 0xcc, 0x94, 0xc6, 0x33, 0xf4, 0x1e, 0x29, 0xdd, 0xe8, 0xd6,
	0x7a, 0xcd, 0x6c, 0x15, 0x4a, 0x0e, 0x45, 0xf3, 0x45, 0x6e, 0xcd, 0xa9, 0xad, 0x30, 0xdd, 0xec,
	0xd6, 0x7a, 0x3b, 0x4f, 0x93, 0xc5, 0xcc, 0xfd, 0xa0, 0xf5, 0x7c, 0x14, 0x0c, 0x29, 0x87, 0xd9,
	0x92, 0x93, 0x1c, 0x88, 0xe6, 0x2b, 0x69, 0x86, 0x81, 0x1c, 0xa6, 0x5b, 0x91, 0xbf, 0xb3, 0xe0,
	0x73, 0xf6, 0x39, 0xe5, 0x65, 0xb6, 0xcc, 0xf3, 0x94, 0x03, 0x34, 0x61, 0x28, 0x2b, 0xa4, 0x5c,
	0xab, 0x2a, 0x6d, 0x76, 0xeb, 0xbd, 0x56, 0xb6, 0x0e, 0xb2, 0xc6, 0x3e, 0xa2, 0xd7, 0x38, 0xb4,
	0x53, 0xa4, 0xb4, 0x15, 0x39, 0xab, 0x50, 0x72, 0x4f, 0x34, 0x2f, 0xd5, 0x64, 0x48, 0xaa, 0xc0,
	0x54, 0xc4, 0xf4, 0x32, 0xe6, 0xb5, 0x1d, 0xab, 0xd7, 0x96, 0x72, 0x3c, 0x91, 0x8a, 0xd2, 0x76,
	0x94, 0xf4, 0x6e, 0x6d, 0x2b, 0x89, 0x6c, 0x95, 0x95, 0xf4, 0xc4, 0xee, 0x89, 0x56, 0x93, 0xd2,
	0x0f, 0x25, 0xc9, 0xbc, 0x0c, 0x1e, 0xd3, 0x4e, 0xb7, 0xde, 0xdb, 0xca, 0xde, 0x87, 0xb9, 0x35,
	0xbb, 0x23, 0x93, 0x39, 0xa6, 0xdb, 0x91, 0xb2, 0x8c, 0x93, 0x3d, 0x21, 0xce, 0xec, 0x95, 0xff,
	0x25, 0x48, 0xa2, 0x79, 0xba, 0xd3, 0xad, 0xf7, 0x3a, 0xd9, 0x0a, 0xc2, 0x83, 0x5d, 0xc8, 0x5f,
	0xd5, 0xbb, 0xc6, 0xe9, 0x6e, 0x24, 0xac, 0x42, 0xc9, 0x23, 0xb1, 0xf3, 0xa3, 0xc6, 0xdc, 0x2b,
	0x6b, 0xfa, 0x21, 0x6e, 0x08, 0x62, 0x8f, 0xf7, 0x50, 0xd6, 0xdb, 0x27, 0x85, 0x57, 0xb9, 0x74,
	0xd8, 0x97, 0x63, 0x6b, 0x4d, 0x7a, 0x2b, 0x56, 0x7b, 0x1f, 0x66, 0xbd, 0x03, 0x59, 0x8d, 0x4a,
	0x49, 0xd3, 0x34, 0x89, 0xbe, 0x5b, 0xc6, 0x6c, 0x98, 0x73, 0xf4, 0x2f, 0x8c, 0x47, 0xd2, 0xa1,
	0xc0, 0xf4, 0x76, 0x74, 0xc3, 0x1a, 0xb6, 0x30, 0xf4, 0x81, 0x5b, 0xbb, 0xd4, 0x44, 0x88, 0xcd,
	0x33, 0x79, 0x3d, 0x47, 0x82, 0x06, 0x7f, 0xbf, 0xd4, 0xc5, 0x40, 0x1a, 0xd8, 0x48, 0x9a, 0xa2,
	0x71, 0x8a, 0xba, 0x82, 0xcd, 0xa4, 0x25, 0x36, 0x32, 0x59, 0x48, 0x82, 0x56, 0xb2, 0x25, 0xea,
	0xcf, 0x69, 0x06, 0x82, 0xb1, 0x57, 0x48, 0x0e, 0xa1, 0xcd, 0xc4, 0xf3, 0xe0, 0x1d, 0xec, 0x26,
	0xdb, 0xa2, 0xb5, 0x94, 0x0c, 0x77, 0xb8, 0xda, 0x50, 0xf2, 0x2f, 0x08, 0x77, 0x0f, 0x7e, 0xdf,
	0x10, 0xcd, 0xff, 0x4c, 0xc4, 0x27, 0x06, 0xca, 0x14, 0x70, 0x83, 0x29, 0x3f, 0xa3, 0x31, 0xa8,
	0xa1, 0xc6, 0xe8, 0x91, 0x25, 0x03, 0x37, 0x93, 0xb6, 0xd8, 0x1a, 0x29, 0x8d, 0x26, 0x47, 0xa8,
	0x73, 0x70, 0x66, 0xc7, 0xce, 0x47, 0x81, 0x4d, 0xd1, 0x78, 0xf9, 0x1a, 0xdf, 0xc9, 0x3b, 0xb7,
	0x0e, 0x17, 0xf2, 0xce, 0xe5, 0x6b, 0xd4, 0xb0, 0xc5, 0xe0, 0x50, 0x69, 0x0d, 0x4d, 0x06, 0x4f,
	0xad, 0xd6, 0x73, 0x68, 0x25, 0x1d, 0xd1, 0x3c, 0xb6, 0xb9, 0xe7, 0xbf, 0x06, 0x04, 0x53, 0x4e,
	0x2c, 0x4d, 0x17, 0xba, 0xfb, 0xa8, 0x3d, 0x74, 0x62, 0xe7, 0xa0, 0x3d, 0x6c, 0xf3, 0xd7, 0x45,
	0x70, 0x53, 0xd8, 0xe1, 0x02, 0x47, 0xa5, 0xaa, 0x78, 0x2c, 0x06, 0xd1, 0x78, 0x80, 0x85, 0x44,
	0xe9, 0xe1, 0x56, 0x4c, 0xdb, 0x40, 0x1e, 0x12, 0x16, 0x98, 0x05, 0x23, 0xaf, 0xe5, 0x1c, 0x6e,
	0x73, 0xb3, 0x41, 0xd0, 0x63, 0x24, 0x9a, 0xc3, 0x07, 0xc9, 0x8e, 0x10, 0x43, 0xab, 0x95, 0x57,
	0xb9, 0x92, 0x06, 0xee, 0x30, 0x95, 0xdf, 0x2d, 0x39, 0x41, 0xb8, 0xcb, 0xc1, 0x05, 0xca, 0xbc,
	0x44, 0x82, 0x0f, 0xb9, 0xf2, 0x99, 0xba, 0xf2, 0x90, 0xf2, 0x95, 0x1c, 0x4b, 0x7e, 0xd8, 0xe0,
	0x23, 0xee, 0xf2, 0x92, 0x0a, 0x24, 0xb8, 0xc7, 0x9f, 0x17, 0xca, 0x6b, 0x84, 0x8f, 0x93, 0x5d,
	0xd1, 0xbe, 0x2c, 0x11, 0xf5, 0x58, 0x12, 0xd9, 0x6b, 0xb8, 0xcf, 0x4d, 0x4f, 0xad, 0xc3, 0x4a,
	0x55, 0x08, 0x9f, 0xf0, 0x16, 0x8e, 0x24, 0x55, 0xc8, 0x6b, 0x87, 0x3d, 0xae, 0xcc, 0x6f, 0x0e,
	0x3c, 0x88, 0x57, 0xa6, 0x34, 0x42, 0x37, 0xaa, 0xd7, 0x36, 0x14, 0xf0, 0xe9, 0x62, 0x17, 0x5a,
	0xc3, 0x3e, 0x37, 0xbe, 0x94, 0x5a, 0xa3, 0x87, 0xcf, 0x98, 0x30, 0x0a, 0x13, 0x49, 0xf0, 0x90,
	0xe1, 0x23, 0x52, 0x4e, 0x39, 0xf8, 0x9c, 0xc9, 0xc7, 0xc1, 0xcf, 0xe1, 0x11, 0x37, 0x19, 0x28,
	0x3d, 0x75, 0xa5, 0x9c, 0x22, 0x7c, 0xc1, 0xbe, 0xb8, 0x90, 0x15, 0xf4, 0xe2, 0x0d, 0x69, 0x39,
	0x87, 0x2f, 0x79, 0xbc, 0x23, 0x4b, 0xd6, 0xa0, 0x87, 0x83, 0x85, 0x33, 0x50, 0x4e, 0xaf, 0xa4,
	0xf3, 0xf0, 0x55, 0x5c, 0x02, 0x2b, 0xf9, 0x3a, 0x26, 0x82, 0xd6, 0x85, 0xfd, 0x0d, 0x09, 0x1e,
	0xc7, 0xeb, 0x93, 0xde, 0x13, 0x3a, 0x07, 0x87, 0xdc, 0x7a, 0xa0, 0x4c, 0xf0, 0x08, 0x4f, 0xa2,
	0x8c, 0x52, 0x39, 0xd4, 0xf0, 0x0d, 0x97, 0x7e, 0xee, 0x2a, 0x45, 0xca, 0xc0, 0xb7, 0x7c, 0x24,
	0xb3, 0x41, 0xf3, 0x83, 0x07, 0x4f, 0x59, 0xc8, 0xa9, 0x9c, 0xc1, 0x33, 0x9e, 0xa0, 0x8f, 0x26,
	0x2f, 0xe1, 0x3b, 0xfe, 0x1c, 0x28, 0x83, 0x04, 0xdf, 0x1f, 0xfc, 0x51, 0x13, 0x9d, 0xd5, 0xb7,
	0x2f, 0x5a, 0x4d, 0x9a, 0x42, 0x6a, 0x07, 0x37, 0xb8, 0xd4, 0xa8, 0xb4, 0xd7, 0xd1, 0xbe, 0x35,
	0x4e, 0x9d, 0x68, 0x4b, 0xca, 0x79, 0xb8, 0xc9, 0xed, 0x4f, 0x48, 0x15, 0x13, 0x76, 0x24, 0xfb,
	0x81, 0xe4, 0x0c, 0x1a, 0x5c, 0x79, 0x68, 0x29, 0x2f, 0x61, 0x23, 0x9e, 0x9d, 0xce, 0xe3, 0x03,
	0x03, 0x9b, 0x4c, 0xf9, 0xc9, 0x4e, 0x11, 0xb6, 0xa2, 0x7d, 0x51, 0x7a, 0xde, 0x72, 0x74, 0xe5,
	0x11, 0x49, 0x83, 0xd0, 0x8a, 0x45, 0x6c, 0x20, 0x10, 0xfd, 0xe6, 0xdb, 0x37, 0x7b, 0xb5, 0x7f,
	0xde, 0xec, 0xd5, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x97, 0xf0, 0xc8, 0x32, 0x52, 0x07, 0x00,
	0x00,
}
